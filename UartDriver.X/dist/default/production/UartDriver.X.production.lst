

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Oct 29 14:30:30 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           	psect	idataCOMRAM
    39  0010DC                     __pidataCOMRAM:
    40                           	opt stack 0
    41                           
    42                           ;initializer for _ackCharacter
    43  0010DC  25                 	db	low STR_4
    44  0010DD  08                 	db	high STR_4
    45                           
    46                           ;initializer for _startCharacter
    47  0010DE  34                 	db	low STR_1
    48  0010DF  08                 	db	high STR_1
    49                           
    50                           ;initializer for _stopCharacter
    51  0010E0  32                 	db	low STR_2
    52  0010E1  08                 	db	high STR_2
    53                           
    54                           	psect	idataBANK0
    55  0010E2                     __pidataBANK0:
    56                           	opt stack 0
    57                           
    58                           ;initializer for _messageCharacter
    59  0010E2  29                 	db	low STR_3
    60  0010E3  08                 	db	high STR_3
    61                           
    62                           	psect	smallconst
    63  000800                     __psmallconst:
    64                           	opt stack 0
    65  000800  00                 	db	0
    66  000801                     _hexpowers:
    67                           	opt stack 0
    68  000801  0001               	dw	1
    69  000803  0010               	dw	16
    70  000805  0100               	dw	256
    71  000807  1000               	dw	4096
    72  000809                     __end_of_hexpowers:
    73                           	opt stack 0
    74  000809                     STR_11:
    75  000809  30                 	db	48	;'0'
    76  00080A  31                 	db	49	;'1'
    77  00080B  32                 	db	50	;'2'
    78  00080C  33                 	db	51	;'3'
    79  00080D  34                 	db	52	;'4'
    80  00080E  35                 	db	53	;'5'
    81  00080F  36                 	db	54	;'6'
    82  000810  37                 	db	55	;'7'
    83  000811  38                 	db	56	;'8'
    84  000812  39                 	db	57	;'9'
    85  000813  61                 	db	97	;'a'
    86  000814  62                 	db	98	;'b'
    87  000815  63                 	db	99	;'c'
    88  000816  64                 	db	100	;'d'
    89  000817  65                 	db	101	;'e'
    90  000818  66                 	db	102	;'f'
    91  000819  00                 	db	0
    92  00081A                     STR_8:
    93  00081A  50                 	db	80	;'P'
    94  00081B  61                 	db	97	;'a'
    95  00081C  6E                 	db	110	;'n'
    96  00081D  64                 	db	100	;'d'
    97  00081E  61                 	db	97	;'a'
    98  00081F  00                 	db	0
    99  000820                     STR_10:
   100  000820  49                 	db	73	;'I'
   101  000821  6E                 	db	110	;'n'
   102  000822  69                 	db	105	;'i'
   103  000823  74                 	db	116	;'t'
   104  000824  00                 	db	0
   105  000825                     STR_4:
   106  000825  5B                 	db	91	;'['
   107  000826  41                 	db	65	;'A'
   108  000827  5D                 	db	93	;']'
   109  000828  00                 	db	0
   110  000829                     STR_3:
   111  000829  5B                 	db	91	;'['
   112  00082A  4D                 	db	77	;'M'
   113  00082B  5D                 	db	93	;']'
   114  00082C  00                 	db	0
   115  00082D                     STR_5:
   116  00082D  25                 	db	37
   117  00082E  78                 	db	120	;'x'
   118  00082F  00                 	db	0
   119  000830                     STR_9:
   120  000830  49                 	db	73	;'I'
   121  000831  00                 	db	0
   122  000832                     STR_2:
   123  000832  24                 	db	36
   124  000833  00                 	db	0
   125  000834                     STR_1:
   126  000834  26                 	db	38
   127  000835  00                 	db	0
   128  000836                     STR_6:
   129  000836  3A                 	db	58	;':'
   130  000837  00                 	db	0
   131  0000                     
   132                           ; #config settings
   133  000838  00                 	db	0	; dummy byte at the end
   134  0000                     
   135                           	psect	nvBANK0
   136  000077                     __pnvBANK0:
   137                           	opt stack 0
   138  000077                     _deviceName:
   139                           	opt stack 0
   140  000077                     	ds	3
   141  0000                     _ADCON1	set	4033
   142  0000                     _BAUDCONbits	set	4024
   143  0000                     _INTCONbits	set	4082
   144  0000                     _IPR1bits	set	3999
   145  0000                     _PIE1bits	set	3997
   146  0000                     _PIR1bits	set	3998
   147  0000                     _PORTA	set	3968
   148  0000                     _PORTAbits	set	3968
   149  0000                     _PORTB	set	3969
   150  0000                     _PORTC	set	3970
   151  0000                     _RCONbits	set	4048
   152  0000                     _RCREG	set	4014
   153  0000                     _RCSTAbits	set	4011
   154  0000                     _SPBRG	set	4015
   155  0000                     _TRISA	set	3986
   156  0000                     _TRISB	set	3987
   157  0000                     _TRISC	set	3988
   158  0000                     _TRISCbits	set	3988
   159  0000                     _TXREG	set	4013
   160  0000                     _TXSTAbits	set	4012
   161                           
   162                           	psect	cinit
   163  000F7A                     __pcinit:
   164                           	opt stack 0
   165  000F7A                     start_initialization:
   166                           	opt stack 0
   167  000F7A                     __initialization:
   168                           	opt stack 0
   169                           
   170                           ; Clear objects allocated to BANK1 (166 bytes)
   171  000F7A  EE01  F000         	lfsr	0,__pbssBANK1
   172  000F7E  0EA6               	movlw	166
   173  000F80                     clear_0:
   174  000F80  6AEE               	clrf	postinc0,c
   175  000F82  06E8               	decf	wreg,f,c
   176  000F84  E1FD               	bnz	clear_0
   177                           
   178                           ; Clear objects allocated to COMRAM (2 bytes)
   179  000F86  6A35               	clrf	(__pbssCOMRAM+1)& (0+255),c
   180  000F88  6A34               	clrf	__pbssCOMRAM& (0+255),c
   181                           
   182                           ; Initialize objects allocated to BANK0 (2 bytes)
   183                           ; load TBLPTR registers with __pidataBANK0
   184  000F8A  0EE2               	movlw	low __pidataBANK0
   185  000F8C  6EF6               	movwf	tblptrl,c
   186  000F8E  0E10               	movlw	high __pidataBANK0
   187  000F90  6EF7               	movwf	tblptrh,c
   188  000F92  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   189  000F94  6EF8               	movwf	tblptru,c
   190  000F96  0009               	tblrd		*+	;fetch initializer
   191  000F98  CFF5 F07A          	movff	tablat,__pdataBANK0
   192  000F9C  0009               	tblrd		*+	;fetch initializer
   193  000F9E  CFF5 F07B          	movff	tablat,__pdataBANK0+1
   194                           
   195                           ; Initialize objects allocated to COMRAM (6 bytes)
   196                           ; load TBLPTR registers with __pidataCOMRAM
   197  000FA2  0EDC               	movlw	low __pidataCOMRAM
   198  000FA4  6EF6               	movwf	tblptrl,c
   199  000FA6  0E10               	movlw	high __pidataCOMRAM
   200  000FA8  6EF7               	movwf	tblptrh,c
   201  000FAA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   202  000FAC  6EF8               	movwf	tblptru,c
   203  000FAE  EE00  F02E         	lfsr	0,__pdataCOMRAM
   204  000FB2  EE10 F006          	lfsr	1,6
   205  000FB6                     copy_data0:
   206  000FB6  0009               	tblrd		*+
   207  000FB8  CFF5 FFEE          	movff	tablat,postinc0
   208  000FBC  50E5               	movf	postdec1,w,c
   209  000FBE  50E1               	movf	fsr1l,w,c
   210  000FC0  E1FA               	bnz	copy_data0
   211  000FC2                     end_of_initialization:
   212                           	opt stack 0
   213  000FC2                     __end_of__initialization:
   214                           	opt stack 0
   215  000FC2  9036               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   216  000FC4  9236               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   217  000FC6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   218  000FC8  6EF8               	movwf	tblptru,c
   219  000FCA  0100               	movlb	0
   220  000FCC  EF11  F008         	goto	_main	;jump to C main() function
   221                           tblptru	equ	0xFF8
   222                           tblptrh	equ	0xFF7
   223                           tblptrl	equ	0xFF6
   224                           tablat	equ	0xFF5
   225                           postinc0	equ	0xFEE
   226                           wreg	equ	0xFE8
   227                           postdec1	equ	0xFE5
   228                           fsr1l	equ	0xFE1
   229                           
   230                           	psect	bssCOMRAM
   231  000034                     __pbssCOMRAM:
   232                           	opt stack 0
   233  000034                     _baud:
   234                           	opt stack 0
   235  000034                     	ds	1
   236  000035                     _readReady:
   237                           	opt stack 0
   238  000035                     	ds	1
   239                           tblptru	equ	0xFF8
   240                           tblptrh	equ	0xFF7
   241                           tblptrl	equ	0xFF6
   242                           tablat	equ	0xFF5
   243                           postinc0	equ	0xFEE
   244                           wreg	equ	0xFE8
   245                           postdec1	equ	0xFE5
   246                           fsr1l	equ	0xFE1
   247                           
   248                           	psect	dataCOMRAM
   249  00002E                     __pdataCOMRAM:
   250                           	opt stack 0
   251  00002E                     _ackCharacter:
   252                           	opt stack 0
   253  00002E                     	ds	2
   254  000030                     _startCharacter:
   255                           	opt stack 0
   256  000030                     	ds	2
   257  000032                     _stopCharacter:
   258                           	opt stack 0
   259  000032                     	ds	2
   260                           tblptru	equ	0xFF8
   261                           tblptrh	equ	0xFF7
   262                           tblptrl	equ	0xFF6
   263                           tablat	equ	0xFF5
   264                           postinc0	equ	0xFEE
   265                           wreg	equ	0xFE8
   266                           postdec1	equ	0xFE5
   267                           fsr1l	equ	0xFE1
   268                           
   269                           	psect	dataBANK0
   270  00007A                     __pdataBANK0:
   271                           	opt stack 0
   272  00007A                     _messageCharacter:
   273                           	opt stack 0
   274  00007A                     	ds	2
   275                           tblptru	equ	0xFF8
   276                           tblptrh	equ	0xFF7
   277                           tblptrl	equ	0xFF6
   278                           tablat	equ	0xFF5
   279                           postinc0	equ	0xFEE
   280                           wreg	equ	0xFE8
   281                           postdec1	equ	0xFE5
   282                           fsr1l	equ	0xFE1
   283                           
   284                           	psect	bssBANK1
   285  000100                     __pbssBANK1:
   286                           	opt stack 0
   287  000100                     _readBuffer:
   288                           	opt stack 0
   289  000100                     	ds	166
   290                           tblptru	equ	0xFF8
   291                           tblptrh	equ	0xFF7
   292                           tblptrl	equ	0xFF6
   293                           tablat	equ	0xFF5
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           postdec1	equ	0xFE5
   297                           fsr1l	equ	0xFE1
   298                           
   299                           	psect	cstackBANK0
   300  000060                     __pcstackBANK0:
   301                           	opt stack 0
   302  000060                     ?___aldiv:
   303                           	opt stack 0
   304  000060                     ___lwdiv@counter:
   305                           	opt stack 0
   306  000060                     ___aldiv@dividend:
   307                           	opt stack 0
   308                           
   309                           ; 4 bytes @ 0x0
   310  000060                     	ds	1
   311  000061                     ___lwdiv@quotient:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0x1
   315  000061                     	ds	2
   316  000063                     ?_printf:
   317                           	opt stack 0
   318  000063                     printf@f:
   319                           	opt stack 0
   320                           
   321                           ; 3 bytes @ 0x3
   322  000063                     	ds	1
   323  000064                     ___aldiv@divisor:
   324                           	opt stack 0
   325                           
   326                           ; 4 bytes @ 0x4
   327  000064                     	ds	2
   328  000066                     ??_printf:
   329                           
   330                           ; 1 bytes @ 0x6
   331  000066                     	ds	2
   332  000068                     ___aldiv@counter:
   333                           	opt stack 0
   334                           
   335                           ; 1 bytes @ 0x8
   336  000068                     	ds	1
   337  000069                     printf@flag:
   338                           	opt stack 0
   339  000069                     ___aldiv@sign:
   340                           	opt stack 0
   341                           
   342                           ; 1 bytes @ 0x9
   343  000069                     	ds	1
   344  00006A                     printf@idx:
   345                           	opt stack 0
   346  00006A                     ___aldiv@quotient:
   347                           	opt stack 0
   348                           
   349                           ; 4 bytes @ 0xA
   350  00006A                     	ds	1
   351  00006B                     printf@ap:
   352                           	opt stack 0
   353                           
   354                           ; 2 bytes @ 0xB
   355  00006B                     	ds	2
   356  00006D                     printf@val:
   357                           	opt stack 0
   358                           
   359                           ; 2 bytes @ 0xD
   360  00006D                     	ds	1
   361  00006E                     D_UART_Init@name:
   362                           	opt stack 0
   363                           
   364                           ; 2 bytes @ 0xE
   365  00006E                     	ds	1
   366  00006F                     printf@prec:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0xF
   370  00006F                     	ds	1
   371  000070                     printf@c:
   372                           	opt stack 0
   373  000070                     D_UART_Init@baud:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0x10
   377  000070                     	ds	1
   378  000071                     D_UART_Write@command:
   379                           	opt stack 0
   380                           
   381                           ; 2 bytes @ 0x11
   382  000071                     	ds	1
   383  000072                     D_UART_Init@interrupts:
   384                           	opt stack 0
   385                           
   386                           ; 1 bytes @ 0x12
   387  000072                     	ds	1
   388  000073                     D_UART_Write@data:
   389                           	opt stack 0
   390  000073                     _D_UART_Init$1270:
   391                           	opt stack 0
   392                           
   393                           ; 4 bytes @ 0x13
   394  000073                     	ds	2
   395  000075                     ??_D_UART_Write:
   396                           
   397                           ; 1 bytes @ 0x15
   398  000075                     	ds	2
   399                           tblptru	equ	0xFF8
   400                           tblptrh	equ	0xFF7
   401                           tblptrl	equ	0xFF6
   402                           tablat	equ	0xFF5
   403                           postinc0	equ	0xFEE
   404                           wreg	equ	0xFE8
   405                           postdec1	equ	0xFE5
   406                           fsr1l	equ	0xFE1
   407                           
   408                           	psect	cstackCOMRAM
   409  000001                     __pcstackCOMRAM:
   410                           	opt stack 0
   411  000001                     ?i1___lwdiv:
   412                           	opt stack 0
   413  000001                     i1writeByte@data:
   414                           	opt stack 0
   415  000001                     i1___lwdiv@dividend:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x0
   419  000001                     	ds	1
   420  000002                     i1putch@data:
   421                           	opt stack 0
   422                           
   423                           ; 1 bytes @ 0x1
   424  000002                     	ds	1
   425  000003                     i1___lwdiv@divisor:
   426                           	opt stack 0
   427                           
   428                           ; 2 bytes @ 0x2
   429  000003                     	ds	2
   430  000005                     i1___lwdiv@quotient:
   431                           	opt stack 0
   432                           
   433                           ; 2 bytes @ 0x4
   434  000005                     	ds	2
   435  000007                     i1___lwdiv@counter:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0x6
   439  000007                     	ds	1
   440  000008                     ?i1_printf:
   441                           	opt stack 0
   442  000008                     i1printf@f:
   443                           	opt stack 0
   444                           
   445                           ; 3 bytes @ 0x7
   446  000008                     	ds	5
   447  00000D                     ??i1_printf:
   448                           
   449                           ; 1 bytes @ 0xC
   450  00000D                     	ds	3
   451  000010                     i1printf@flag:
   452                           	opt stack 0
   453                           
   454                           ; 1 bytes @ 0xF
   455  000010                     	ds	1
   456  000011                     i1printf@ap:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x10
   460  000011                     	ds	2
   461  000013                     i1printf@idx:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x12
   465  000013                     	ds	1
   466  000014                     i1printf@val:
   467                           	opt stack 0
   468                           
   469                           ; 2 bytes @ 0x13
   470  000014                     	ds	2
   471  000016                     i1printf@prec:
   472                           	opt stack 0
   473                           
   474                           ; 1 bytes @ 0x15
   475  000016                     	ds	1
   476  000017                     i1printf@c:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0x16
   480  000017                     	ds	1
   481  000018                     fillDataBuffer@data:
   482                           	opt stack 0
   483                           
   484                           ; 1 bytes @ 0x17
   485  000018                     	ds	1
   486  000019                     ??_LowISR:
   487                           
   488                           ; 1 bytes @ 0x18
   489  000019                     	ds	17
   490  00002A                     ?___lwdiv:
   491                           	opt stack 0
   492  00002A                     writeByte@data:
   493                           	opt stack 0
   494  00002A                     D_UART_Enable@enable:
   495                           	opt stack 0
   496  00002A                     ___lwdiv@dividend:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x29
   500  00002A                     	ds	1
   501  00002B                     putch@data:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0x2A
   505  00002B                     	ds	1
   506  00002C                     ___lwdiv@divisor:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x2B
   510  00002C                     	ds	2
   511  00002E                     tblptru	equ	0xFF8
   512                           tblptrh	equ	0xFF7
   513                           tblptrl	equ	0xFF6
   514                           tablat	equ	0xFF5
   515                           postinc0	equ	0xFEE
   516                           wreg	equ	0xFE8
   517                           postdec1	equ	0xFE5
   518                           fsr1l	equ	0xFE1
   519                           
   520                           ; 1 bytes @ 0x2D
   521 ;;
   522 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   523 ;;
   524 ;; *************** function _main *****************
   525 ;; Defined at:
   526 ;;		line 17 in file "main.c"
   527 ;; Parameters:    Size  Location     Type
   528 ;;		None
   529 ;; Auto vars:     Size  Location     Type
   530 ;;		None
   531 ;; Return value:  Size  Location     Type
   532 ;;                  1    wreg      void 
   533 ;; Registers used:
   534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   535 ;; Tracked objects:
   536 ;;		On entry : 0/0
   537 ;;		On exit  : 0/0
   538 ;;		Unchanged: 0/0
   539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   540 ;;      Params:         0       0       0       0       0       0       0       0       0
   541 ;;      Locals:         0       0       0       0       0       0       0       0       0
   542 ;;      Temps:          0       0       0       0       0       0       0       0       0
   543 ;;      Totals:         0       0       0       0       0       0       0       0       0
   544 ;;Total ram usage:        0 bytes
   545 ;; Hardware stack levels required when called:   10
   546 ;; This function calls:
   547 ;;		_D_PORT_Init
   548 ;;		_D_UART_Enable
   549 ;;		_D_UART_Init
   550 ;;		_D_UART_Write
   551 ;; This function is called by:
   552 ;;		Startup code after reset
   553 ;; This function uses a non-reentrant model
   554 ;;
   555                           
   556                           	psect	text0
   557  001022                     __ptext0:
   558                           	opt stack 0
   559  001022                     _main:
   560                           	opt stack 21
   561                           
   562                           ;main.c: 19: D_PORT_Init();
   563                           
   564                           ;incstack = 0
   565  001022  EC45  F008         	call	_D_PORT_Init	;wreg free
   566                           
   567                           ;main.c: 22: D_UART_Init("Panda", 9600, 1);
   568  001026  0E1A               	movlw	low STR_8
   569  001028  0100               	movlb	0	; () banked
   570  00102A  6F6E               	movwf	D_UART_Init@name& (0+255),b
   571  00102C  0E08               	movlw	high STR_8
   572  00102E  0100               	movlb	0	; () banked
   573  001030  6F6F               	movwf	(D_UART_Init@name+1)& (0+255),b
   574  001032  0E25               	movlw	37
   575  001034  0100               	movlb	0	; () banked
   576  001036  6F71               	movwf	(D_UART_Init@baud+1)& (0+255),b
   577  001038  0E80               	movlw	128
   578  00103A  6F70               	movwf	D_UART_Init@baud& (0+255),b
   579  00103C  0E01               	movlw	1
   580  00103E  0100               	movlb	0	; () banked
   581  001040  6F72               	movwf	D_UART_Init@interrupts& (0+255),b
   582  001042  EC0C  F007         	call	_D_UART_Init	;wreg free
   583                           
   584                           ;main.c: 23: D_UART_Enable(1);
   585  001046  0E01               	movlw	1
   586  001048  EC35  F008         	call	_D_UART_Enable
   587                           
   588                           ;main.c: 25: D_UART_Write("I", "Init");
   589  00104C  0E30               	movlw	low STR_9
   590  00104E  0100               	movlb	0	; () banked
   591  001050  6F71               	movwf	D_UART_Write@command& (0+255),b
   592  001052  0E08               	movlw	high STR_9
   593  001054  0100               	movlb	0	; () banked
   594  001056  6F72               	movwf	(D_UART_Write@command+1)& (0+255),b
   595  001058  0E20               	movlw	low STR_10
   596  00105A  0100               	movlb	0	; () banked
   597  00105C  6F73               	movwf	D_UART_Write@data& (0+255),b
   598  00105E  0E08               	movlw	high STR_10
   599  001060  0100               	movlb	0	; () banked
   600  001062  6F74               	movwf	(D_UART_Write@data+1)& (0+255),b
   601  001064  ECA3  F006         	call	_D_UART_Write	;wreg free
   602  001068                     l142:
   603  001068  D7FF               	goto	l142
   604  00106A                     __end_of_main:
   605                           	opt stack 0
   606                           tblptru	equ	0xFF8
   607                           tblptrh	equ	0xFF7
   608                           tblptrl	equ	0xFF6
   609                           tablat	equ	0xFF5
   610                           postinc0	equ	0xFEE
   611                           wreg	equ	0xFE8
   612                           postdec1	equ	0xFE5
   613                           fsr1l	equ	0xFE1
   614                           
   615 ;; *************** function _D_UART_Write *****************
   616 ;; Defined at:
   617 ;;		line 216 in file "Drivers/UART_Driver.c"
   618 ;; Parameters:    Size  Location     Type
   619 ;;  command         2   17[BANK0 ] PTR const unsigned char 
   620 ;;		 -> STR_9(2), 
   621 ;;  data            2   19[BANK0 ] PTR const unsigned char 
   622 ;;		 -> STR_10(5), 
   623 ;; Auto vars:     Size  Location     Type
   624 ;;		None
   625 ;; Return value:  Size  Location     Type
   626 ;;                  1    wreg      void 
   627 ;; Registers used:
   628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   629 ;; Tracked objects:
   630 ;;		On entry : 0/0
   631 ;;		On exit  : 0/0
   632 ;;		Unchanged: 0/0
   633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   634 ;;      Params:         0       4       0       0       0       0       0       0       0
   635 ;;      Locals:         0       0       0       0       0       0       0       0       0
   636 ;;      Temps:          0       1       0       0       0       0       0       0       0
   637 ;;      Totals:         0       5       0       0       0       0       0       0       0
   638 ;;Total ram usage:        5 bytes
   639 ;; Hardware stack levels used:    1
   640 ;; Hardware stack levels required when called:    9
   641 ;; This function calls:
   642 ;;		_printf
   643 ;; This function is called by:
   644 ;;		_main
   645 ;; This function uses a non-reentrant model
   646 ;;
   647                           
   648                           	psect	text1
   649  000D46                     __ptext1:
   650                           	opt stack 0
   651  000D46                     _D_UART_Write:
   652                           	opt stack 21
   653                           
   654                           ;UART_Driver.c: 217: printf(startCharacter);
   655                           
   656                           ;incstack = 0
   657  000D46  C030  F063         	movff	_startCharacter,printf@f
   658  000D4A  C031  F064         	movff	_startCharacter+1,printf@f+1
   659  000D4E  0100               	movlb	0	; () banked
   660  000D50  5163               	movf	printf@f& (0+255),w,b
   661  000D52  1164               	iorwf	(printf@f+1)& (0+255),w,b
   662  000D54  A4D8               	btfss	status,2,c
   663  000D56  0E00               	movlw	low (__mediumconst shr (0+16))
   664  000D58  6F65               	movwf	(printf@f+2)& (0+255),b
   665  000D5A  ECD5  F004         	call	_printf	;wreg free
   666                           
   667                           ;UART_Driver.c: 219: printf(messageCharacter);
   668  000D5E  C07A  F063         	movff	_messageCharacter,printf@f
   669  000D62  C07B  F064         	movff	_messageCharacter+1,printf@f+1
   670  000D66  0100               	movlb	0	; () banked
   671  000D68  5163               	movf	printf@f& (0+255),w,b
   672  000D6A  1164               	iorwf	(printf@f+1)& (0+255),w,b
   673  000D6C  A4D8               	btfss	status,2,c
   674  000D6E  0E00               	movlw	low (__mediumconst shr (0+16))
   675  000D70  6F65               	movwf	(printf@f+2)& (0+255),b
   676  000D72  ECD5  F004         	call	_printf	;wreg free
   677                           
   678                           ;UART_Driver.c: 220: printf(deviceName);
   679  000D76  C077  F063         	movff	_deviceName,printf@f
   680  000D7A  C078  F064         	movff	_deviceName+1,printf@f+1
   681  000D7E  C079  F065         	movff	_deviceName+2,printf@f+2
   682  000D82  ECD5  F004         	call	_printf	;wreg free
   683                           
   684                           ;UART_Driver.c: 222: printf(":");printf(command);
   685  000D86  0E36               	movlw	low STR_6
   686  000D88  0100               	movlb	0	; () banked
   687  000D8A  6F63               	movwf	printf@f& (0+255),b
   688  000D8C  0E08               	movlw	high STR_6
   689  000D8E  0100               	movlb	0	; () banked
   690  000D90  6F64               	movwf	(printf@f+1)& (0+255),b
   691  000D92  0100               	movlb	0	; () banked
   692  000D94  5163               	movf	printf@f& (0+255),w,b
   693  000D96  1164               	iorwf	(printf@f+1)& (0+255),w,b
   694  000D98  A4D8               	btfss	status,2,c
   695  000D9A  0E00               	movlw	low (__mediumconst shr (0+16))
   696  000D9C  6F65               	movwf	(printf@f+2)& (0+255),b
   697  000D9E  ECD5  F004         	call	_printf	;wreg free
   698  000DA2  C071  F063         	movff	D_UART_Write@command,printf@f
   699  000DA6  C072  F064         	movff	D_UART_Write@command+1,printf@f+1
   700  000DAA  0100               	movlb	0	; () banked
   701  000DAC  5163               	movf	printf@f& (0+255),w,b
   702  000DAE  1164               	iorwf	(printf@f+1)& (0+255),w,b
   703  000DB0  A4D8               	btfss	status,2,c
   704  000DB2  0E00               	movlw	low (__mediumconst shr (0+16))
   705  000DB4  6F65               	movwf	(printf@f+2)& (0+255),b
   706  000DB6  ECD5  F004         	call	_printf	;wreg free
   707                           
   708                           ;UART_Driver.c: 224: printf(":");printf(data);
   709  000DBA  0E36               	movlw	low STR_6
   710  000DBC  0100               	movlb	0	; () banked
   711  000DBE  6F63               	movwf	printf@f& (0+255),b
   712  000DC0  0E08               	movlw	high STR_6
   713  000DC2  0100               	movlb	0	; () banked
   714  000DC4  6F64               	movwf	(printf@f+1)& (0+255),b
   715  000DC6  0100               	movlb	0	; () banked
   716  000DC8  5163               	movf	printf@f& (0+255),w,b
   717  000DCA  1164               	iorwf	(printf@f+1)& (0+255),w,b
   718  000DCC  A4D8               	btfss	status,2,c
   719  000DCE  0E00               	movlw	low (__mediumconst shr (0+16))
   720  000DD0  6F65               	movwf	(printf@f+2)& (0+255),b
   721  000DD2  ECD5  F004         	call	_printf	;wreg free
   722  000DD6  C073  F063         	movff	D_UART_Write@data,printf@f
   723  000DDA  C074  F064         	movff	D_UART_Write@data+1,printf@f+1
   724  000DDE  0100               	movlb	0	; () banked
   725  000DE0  5163               	movf	printf@f& (0+255),w,b
   726  000DE2  1164               	iorwf	(printf@f+1)& (0+255),w,b
   727  000DE4  A4D8               	btfss	status,2,c
   728  000DE6  0E00               	movlw	low (__mediumconst shr (0+16))
   729  000DE8  6F65               	movwf	(printf@f+2)& (0+255),b
   730  000DEA  ECD5  F004         	call	_printf	;wreg free
   731                           
   732                           ;UART_Driver.c: 226: printf(stopCharacter);
   733  000DEE  C032  F063         	movff	_stopCharacter,printf@f
   734  000DF2  C033  F064         	movff	_stopCharacter+1,printf@f+1
   735  000DF6  0100               	movlb	0	; () banked
   736  000DF8  5163               	movf	printf@f& (0+255),w,b
   737  000DFA  1164               	iorwf	(printf@f+1)& (0+255),w,b
   738  000DFC  A4D8               	btfss	status,2,c
   739  000DFE  0E00               	movlw	low (__mediumconst shr (0+16))
   740  000E00  6F65               	movwf	(printf@f+2)& (0+255),b
   741  000E02  ECD5  F004         	call	_printf	;wreg free
   742                           
   743                           ;UART_Driver.c: 227: _delay((unsigned long)((1)*(10000000/4000.0)));
   744  000E06  0E04               	movlw	4
   745  000E08  0100               	movlb	0	; () banked
   746  000E0A  6F75               	movwf	??_D_UART_Write& (0+255),b
   747  000E0C  0E3E               	movlw	62
   748  000E0E                     u987:
   749  000E0E  2EE8               	decfsz	wreg,f,c
   750  000E10  D7FE               	goto	u987
   751  000E12  2F75               	decfsz	??_D_UART_Write& (0+255),f,b
   752  000E14  D7FC               	goto	u987
   753  000E16  0012               	return		;funcret
   754  000E18                     __end_of_D_UART_Write:
   755                           	opt stack 0
   756                           tblptru	equ	0xFF8
   757                           tblptrh	equ	0xFF7
   758                           tblptrl	equ	0xFF6
   759                           tablat	equ	0xFF5
   760                           postinc0	equ	0xFEE
   761                           wreg	equ	0xFE8
   762                           postdec1	equ	0xFE5
   763                           fsr1l	equ	0xFE1
   764                           status	equ	0xFD8
   765                           
   766 ;; *************** function _printf *****************
   767 ;; Defined at:
   768 ;;		line 464 in file "/opt/microchip/xc8/v1.37/sources/common/doprnt.c"
   769 ;; Parameters:    Size  Location     Type
   770 ;;  f               3    3[BANK0 ] PTR const unsigned char 
   771 ;;		 -> STR_10(5), STR_9(2), STR_8(6), STR_7(2), 
   772 ;;		 -> STR_6(2), STR_5(3), STR_4(4), STR_3(4), 
   773 ;;		 -> ROM(32767), STR_2(2), STR_1(2), 
   774 ;; Auto vars:     Size  Location     Type
   775 ;;  idx             1   10[BANK0 ] unsigned char 
   776 ;;  tmpval          4    0        struct .
   777 ;;  cp              3    0        PTR const unsigned char 
   778 ;;  val             2   13[BANK0 ] unsigned int 
   779 ;;  ap              2   11[BANK0 ] PTR void [1]
   780 ;;		 -> ?i1_printf(2), ?_printf(2), 
   781 ;;  len             2    0        unsigned int 
   782 ;;  c               1   16[BANK0 ] char 
   783 ;;  prec            1   15[BANK0 ] char 
   784 ;;  flag            1    9[BANK0 ] unsigned char 
   785 ;; Return value:  Size  Location     Type
   786 ;;                  2    3[BANK0 ] int 
   787 ;; Registers used:
   788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   789 ;; Tracked objects:
   790 ;;		On entry : 0/0
   791 ;;		On exit  : 0/0
   792 ;;		Unchanged: 0/0
   793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   794 ;;      Params:         0       3       0       0       0       0       0       0       0
   795 ;;      Locals:         0       8       0       0       0       0       0       0       0
   796 ;;      Temps:          0       3       0       0       0       0       0       0       0
   797 ;;      Totals:         0      14       0       0       0       0       0       0       0
   798 ;;Total ram usage:       14 bytes
   799 ;; Hardware stack levels used:    1
   800 ;; Hardware stack levels required when called:    8
   801 ;; This function calls:
   802 ;;		___lwdiv
   803 ;;		_putch
   804 ;; This function is called by:
   805 ;;		_D_UART_Write
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809                           	psect	text2
   810  0009AA                     __ptext2:
   811                           	opt stack 0
   812  0009AA                     _printf:
   813                           	opt stack 21
   814                           
   815                           ;doprnt.c: 466: va_list ap;
   816                           ;doprnt.c: 499: signed char c;
   817                           ;doprnt.c: 506: signed char prec;
   818                           ;doprnt.c: 508: unsigned char flag;
   819                           ;doprnt.c: 523: union {
   820                           ;doprnt.c: 524: unsigned long vd;
   821                           ;doprnt.c: 525: double integ;
   822                           ;doprnt.c: 526: } tmpval;
   823                           ;doprnt.c: 528: unsigned int val;
   824                           ;doprnt.c: 529: unsigned len;
   825                           ;doprnt.c: 530: const char * cp;
   826                           ;doprnt.c: 533: *ap = __va_start();
   827                           
   828                           ;incstack = 0
   829  0009AA  0E66               	movlw	low (?_printf+3)
   830  0009AC  0100               	movlb	0	; () banked
   831  0009AE  6F6B               	movwf	printf@ap& (0+255),b
   832  0009B0  0E00               	movlw	high (?_printf+3)
   833  0009B2  0100               	movlb	0	; () banked
   834  0009B4  6F6C               	movwf	(printf@ap+1)& (0+255),b
   835                           
   836                           ;doprnt.c: 536: while(c = *f++) {
   837  0009B6  D08C               	goto	l1478
   838  0009B8                     l1440:
   839                           
   840                           ; BSR set to: 0
   841                           ;doprnt.c: 538: if(c != '%')
   842  0009B8  0E25               	movlw	37
   843  0009BA  0100               	movlb	0	; () banked
   844  0009BC  1970               	xorwf	printf@c& (0+255),w,b
   845  0009BE  B4D8               	btfsc	status,2,c
   846  0009C0  D005               	goto	l1444
   847                           
   848                           ; BSR set to: 0
   849                           ;doprnt.c: 540: {
   850                           ;doprnt.c: 541: (putch(c) );
   851  0009C2  0100               	movlb	0	; () banked
   852  0009C4  5170               	movf	printf@c& (0+255),w,b
   853  0009C6  EC60  F008         	call	_putch
   854                           
   855                           ;doprnt.c: 542: continue;
   856  0009CA  D082               	goto	l1478
   857  0009CC                     l1444:
   858                           
   859                           ;doprnt.c: 543: }
   860                           ;doprnt.c: 548: flag = 0;
   861  0009CC  0E00               	movlw	0
   862  0009CE  0100               	movlb	0	; () banked
   863  0009D0  6F69               	movwf	printf@flag& (0+255),b
   864                           
   865                           ;doprnt.c: 635: switch(c = *f++) {
   866  0009D2  D005               	goto	l1450
   867  0009D4                     l1446:
   868                           
   869                           ; BSR set to: 0
   870                           ;doprnt.c: 809: (putch(c) );
   871  0009D4  0100               	movlb	0	; () banked
   872  0009D6  5170               	movf	printf@c& (0+255),w,b
   873  0009D8  EC60  F008         	call	_putch
   874                           
   875                           ;doprnt.c: 810: continue;
   876  0009DC  D079               	goto	l1478
   877  0009DE                     l1450:
   878  0009DE  C063  F066         	movff	printf@f,??_printf
   879  0009E2  C064  F067         	movff	printf@f+1,??_printf+1
   880  0009E6  C065  F068         	movff	printf@f+2,??_printf+2
   881  0009EA  0100               	movlb	0	; () banked
   882  0009EC  2B63               	incf	printf@f& (0+255),f,b
   883  0009EE  0E00               	movlw	0
   884  0009F0  2364               	addwfc	(printf@f+1)& (0+255),f,b
   885  0009F2  2365               	addwfc	(printf@f+2)& (0+255),f,b
   886  0009F4  C066  FFF6         	movff	??_printf,tblptrl
   887  0009F8  C067  FFF7         	movff	??_printf+1,tblptrh
   888  0009FC  C068  FFF8         	movff	??_printf+2,tblptru
   889  000A00  0008               	tblrd		*
   890  000A02  CFF5 F070          	movff	tablat,printf@c
   891  000A06  0100               	movlb	0	; () banked
   892  000A08  5170               	movf	printf@c& (0+255),w,b
   893                           
   894                           ; Switch size 1, requested type "space"
   895                           ; Number of cases is 2, Range of values is 0 to 120
   896                           ; switch strategies available:
   897                           ; Name         Instructions Cycles
   898                           ; simple_byte            7     4 (average)
   899                           ;	Chosen strategy is simple_byte
   900  000A0A  0A00               	xorlw	0	; case 0
   901  000A0C  B4D8               	btfsc	status,2,c
   902  000A0E  0012               	return	
   903  000A10  0A78               	xorlw	120	; case 120
   904  000A12  A4D8               	btfss	status,2,c
   905  000A14  D7DF               	goto	l1446
   906                           
   907                           ;doprnt.c: 1273: {
   908                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
   909                           
   910                           ; BSR set to: 0
   911  000A16  C06B  FFD9         	movff	printf@ap,fsr2l
   912  000A1A  C06C  FFDA         	movff	printf@ap+1,fsr2h
   913  000A1E  CFDE F06D          	movff	postinc2,printf@val
   914  000A22  CFDD F06E          	movff	postdec2,printf@val+1
   915  000A26  0E02               	movlw	2
   916  000A28  0100               	movlb	0	; () banked
   917  000A2A  276B               	addwf	printf@ap& (0+255),f,b
   918  000A2C  0E00               	movlw	0
   919  000A2E  236C               	addwfc	(printf@ap+1)& (0+255),f,b
   920                           
   921                           ; BSR set to: 0
   922                           ;doprnt.c: 1287: }
   923                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
   924  000A30  0E01               	movlw	1
   925  000A32  0100               	movlb	0	; () banked
   926  000A34  6F70               	movwf	printf@c& (0+255),b
   927  000A36                     l1458:
   928                           
   929                           ; BSR set to: 0
   930  000A36  0E04               	movlw	4
   931  000A38  0100               	movlb	0	; () banked
   932  000A3A  1970               	xorwf	printf@c& (0+255),w,b
   933  000A3C  B4D8               	btfsc	status,2,c
   934  000A3E  D016               	goto	l166
   935                           
   936                           ; BSR set to: 0
   937                           ;doprnt.c: 1317: if(val < hexpowers[c])
   938                           
   939                           ; BSR set to: 0
   940                           
   941                           ; BSR set to: 0
   942  000A40  0100               	movlb	0	; () banked
   943  000A42  5170               	movf	printf@c& (0+255),w,b
   944  000A44  0D02               	mullw	2
   945  000A46  0E01               	movlw	low _hexpowers
   946  000A48  24F3               	addwf	prodl,w,c
   947  000A4A  6EF6               	movwf	tblptrl,c
   948  000A4C  0E08               	movlw	high _hexpowers
   949  000A4E  20F4               	addwfc	prodh,w,c
   950  000A50  6EF7               	movwf	tblptrh,c
   951  000A52                     	if	0	;There are less than 3 active tblptr bytes
   952  000A52                     	endif
   953  000A52  0009               	tblrd		*+
   954  000A54  50F5               	movf	tablat,w,c
   955  000A56  0100               	movlb	0	; () banked
   956  000A58  5D6D               	subwf	printf@val& (0+255),w,b
   957  000A5A  0009               	tblrd		*+
   958  000A5C  50F5               	movf	tablat,w,c
   959  000A5E  0100               	movlb	0	; () banked
   960  000A60  596E               	subwfb	(printf@val+1)& (0+255),w,b
   961  000A62  A0D8               	btfss	status,0,c
   962  000A64  D003               	goto	l166
   963                           
   964                           ; BSR set to: 0
   965                           
   966                           ; BSR set to: 0
   967                           
   968                           ; BSR set to: 0
   969                           ;doprnt.c: 1318: break;
   970  000A66  0100               	movlb	0	; () banked
   971  000A68  2B70               	incf	printf@c& (0+255),f,b
   972  000A6A  D7E5               	goto	l1458
   973  000A6C                     l166:
   974                           
   975                           ; BSR set to: 0
   976                           ;doprnt.c: 1422: {
   977                           ;doprnt.c: 1469: }
   978                           ;doprnt.c: 1472: prec = c;
   979  000A6C  C070  F06F         	movff	printf@c,printf@prec
   980                           
   981                           ;doprnt.c: 1474: while(prec--) {
   982  000A70  D029               	goto	l1476
   983  000A72                     l1470:
   984                           
   985                           ; BSR set to: 0
   986                           ;doprnt.c: 1478: {
   987                           ;doprnt.c: 1499: {
   988                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
   989  000A72  C06D  F02A         	movff	printf@val,___lwdiv@dividend
   990  000A76  C06E  F02B         	movff	printf@val+1,___lwdiv@dividend+1
   991  000A7A  0100               	movlb	0	; () banked
   992  000A7C  516F               	movf	printf@prec& (0+255),w,b
   993  000A7E  0D02               	mullw	2
   994  000A80  0E01               	movlw	low _hexpowers
   995  000A82  24F3               	addwf	prodl,w,c
   996  000A84  6EF6               	movwf	tblptrl,c
   997  000A86  0E08               	movlw	high _hexpowers
   998  000A88  20F4               	addwfc	prodh,w,c
   999  000A8A  6EF7               	movwf	tblptrh,c
  1000  000A8C                     	if	0	;There are less than 3 active tblptr bytes
  1001  000A8C                     	endif
  1002  000A8C  0009               	tblrd		*+
  1003  000A8E  CFF5 F02C          	movff	tablat,___lwdiv@divisor
  1004  000A92  000A               	tblrd		*-
  1005  000A94  CFF5 F02D          	movff	tablat,___lwdiv@divisor+1
  1006  000A98  EC8E  F007         	call	___lwdiv	;wreg free
  1007  000A9C  502A               	movf	?___lwdiv,w,c
  1008  000A9E  0B0F               	andlw	15
  1009  000AA0  0100               	movlb	0	; () banked
  1010  000AA2  6F6A               	movwf	printf@idx& (0+255),b
  1011                           
  1012                           ; BSR set to: 0
  1013                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  1014  000AA4  0100               	movlb	0	; () banked
  1015  000AA6  516A               	movf	printf@idx& (0+255),w,b
  1016  000AA8  0D01               	mullw	1
  1017  000AAA  0E09               	movlw	low STR_11
  1018  000AAC  24F3               	addwf	prodl,w,c
  1019  000AAE  6EF6               	movwf	tblptrl,c
  1020  000AB0  0E08               	movlw	high STR_11
  1021  000AB2  20F4               	addwfc	prodh,w,c
  1022  000AB4  6EF7               	movwf	tblptrh,c
  1023  000AB6                     	if	0	;There are less than 3 active tblptr bytes
  1024  000AB6                     	endif
  1025  000AB6  0008               	tblrd		*
  1026  000AB8  CFF5 F070          	movff	tablat,printf@c
  1027                           
  1028                           ; BSR set to: 0
  1029                           ;doprnt.c: 1508: }
  1030                           ;doprnt.c: 1523: }
  1031                           ;doprnt.c: 1524: (putch(c) );
  1032  000ABC  0100               	movlb	0	; () banked
  1033  000ABE  5170               	movf	printf@c& (0+255),w,b
  1034  000AC0  EC60  F008         	call	_putch
  1035  000AC4                     l1476:
  1036  000AC4  0100               	movlb	0	; () banked
  1037  000AC6  076F               	decf	printf@prec& (0+255),f,b
  1038  000AC8  0100               	movlb	0	; () banked
  1039  000ACA  296F               	incf	printf@prec& (0+255),w,b
  1040  000ACC  A4D8               	btfss	status,2,c
  1041  000ACE  D7D1               	goto	l1470
  1042  000AD0                     l1478:
  1043  000AD0  C063  F066         	movff	printf@f,??_printf
  1044  000AD4  C064  F067         	movff	printf@f+1,??_printf+1
  1045  000AD8  C065  F068         	movff	printf@f+2,??_printf+2
  1046  000ADC  0100               	movlb	0	; () banked
  1047  000ADE  2B63               	incf	printf@f& (0+255),f,b
  1048  000AE0  0E00               	movlw	0
  1049  000AE2  2364               	addwfc	(printf@f+1)& (0+255),f,b
  1050  000AE4  2365               	addwfc	(printf@f+2)& (0+255),f,b
  1051  000AE6  C066  FFF6         	movff	??_printf,tblptrl
  1052  000AEA  C067  FFF7         	movff	??_printf+1,tblptrh
  1053  000AEE  C068  FFF8         	movff	??_printf+2,tblptru
  1054  000AF2  0008               	tblrd		*
  1055  000AF4  CFF5 F070          	movff	tablat,printf@c
  1056  000AF8  0100               	movlb	0	; () banked
  1057  000AFA  5170               	movf	printf@c& (0+255),w,b
  1058  000AFC  B4D8               	btfsc	status,2,c
  1059  000AFE  0012               	return	
  1060  000B00  D75B               	goto	l1440
  1061  000B02                     __end_of_printf:
  1062                           	opt stack 0
  1063                           tblptru	equ	0xFF8
  1064                           tblptrh	equ	0xFF7
  1065                           tblptrl	equ	0xFF6
  1066                           tablat	equ	0xFF5
  1067                           prodh	equ	0xFF4
  1068                           prodl	equ	0xFF3
  1069                           postinc0	equ	0xFEE
  1070                           wreg	equ	0xFE8
  1071                           postdec1	equ	0xFE5
  1072                           fsr1l	equ	0xFE1
  1073                           postinc2	equ	0xFDE
  1074                           postdec2	equ	0xFDD
  1075                           fsr2h	equ	0xFDA
  1076                           fsr2l	equ	0xFD9
  1077                           status	equ	0xFD8
  1078                           
  1079 ;; *************** function _putch *****************
  1080 ;; Defined at:
  1081 ;;		line 250 in file "Drivers/UART_Driver.c"
  1082 ;; Parameters:    Size  Location     Type
  1083 ;;  data            1    wreg     unsigned char 
  1084 ;; Auto vars:     Size  Location     Type
  1085 ;;  data            1   42[COMRAM] unsigned char 
  1086 ;; Return value:  Size  Location     Type
  1087 ;;                  1    wreg      void 
  1088 ;; Registers used:
  1089 ;;		wreg, status,2, cstack
  1090 ;; Tracked objects:
  1091 ;;		On entry : 0/0
  1092 ;;		On exit  : 0/0
  1093 ;;		Unchanged: 0/0
  1094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1095 ;;      Params:         0       0       0       0       0       0       0       0       0
  1096 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1097 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1098 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1099 ;;Total ram usage:        1 bytes
  1100 ;; Hardware stack levels used:    1
  1101 ;; Hardware stack levels required when called:    7
  1102 ;; This function calls:
  1103 ;;		_writeByte
  1104 ;; This function is called by:
  1105 ;;		_printf
  1106 ;; This function uses a non-reentrant model
  1107 ;;
  1108                           
  1109                           	psect	text3
  1110  0010C0                     __ptext3:
  1111                           	opt stack 0
  1112  0010C0                     _putch:
  1113                           	opt stack 21
  1114                           
  1115                           ; BSR set to: 0
  1116                           ;incstack = 0
  1117                           ;putch@data stored from wreg
  1118  0010C0  6E2B               	movwf	putch@data,c
  1119                           
  1120                           ;UART_Driver.c: 251: writeByte(data);
  1121  0010C2  502B               	movf	putch@data,w,c
  1122  0010C4  EC54  F008         	call	_writeByte
  1123  0010C8  0012               	return		;funcret
  1124  0010CA                     __end_of_putch:
  1125                           	opt stack 0
  1126                           tblptru	equ	0xFF8
  1127                           tblptrh	equ	0xFF7
  1128                           tblptrl	equ	0xFF6
  1129                           tablat	equ	0xFF5
  1130                           prodh	equ	0xFF4
  1131                           prodl	equ	0xFF3
  1132                           postinc0	equ	0xFEE
  1133                           wreg	equ	0xFE8
  1134                           postdec1	equ	0xFE5
  1135                           fsr1l	equ	0xFE1
  1136                           postinc2	equ	0xFDE
  1137                           postdec2	equ	0xFDD
  1138                           fsr2h	equ	0xFDA
  1139                           fsr2l	equ	0xFD9
  1140                           status	equ	0xFD8
  1141                           
  1142 ;; *************** function _writeByte *****************
  1143 ;; Defined at:
  1144 ;;		line 65 in file "Drivers/UART_Driver.c"
  1145 ;; Parameters:    Size  Location     Type
  1146 ;;  data            1    wreg     unsigned char 
  1147 ;; Auto vars:     Size  Location     Type
  1148 ;;  data            1   41[COMRAM] unsigned char 
  1149 ;; Return value:  Size  Location     Type
  1150 ;;                  1    wreg      void 
  1151 ;; Registers used:
  1152 ;;		wreg
  1153 ;; Tracked objects:
  1154 ;;		On entry : 0/0
  1155 ;;		On exit  : 0/0
  1156 ;;		Unchanged: 0/0
  1157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1158 ;;      Params:         0       0       0       0       0       0       0       0       0
  1159 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1160 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1161 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1162 ;;Total ram usage:        1 bytes
  1163 ;; Hardware stack levels used:    1
  1164 ;; Hardware stack levels required when called:    6
  1165 ;; This function calls:
  1166 ;;		Nothing
  1167 ;; This function is called by:
  1168 ;;		_putch
  1169 ;; This function uses a non-reentrant model
  1170 ;;
  1171                           
  1172                           	psect	text4
  1173  0010A8                     __ptext4:
  1174                           	opt stack 0
  1175  0010A8                     _writeByte:
  1176                           	opt stack 21
  1177                           
  1178                           ;incstack = 0
  1179                           ;writeByte@data stored from wreg
  1180  0010A8  6E2A               	movwf	writeByte@data,c
  1181  0010AA                     l53:
  1182  0010AA  A2AC               	btfss	4012,1,c	;volatile
  1183  0010AC  D7FE               	goto	l53
  1184                           
  1185                           ;UART_Driver.c: 67: TXREG = data;
  1186  0010AE  C02A  FFAD         	movff	writeByte@data,4013	;volatile
  1187  0010B2  0012               	return		;funcret
  1188  0010B4                     __end_of_writeByte:
  1189                           	opt stack 0
  1190                           tblptru	equ	0xFF8
  1191                           tblptrh	equ	0xFF7
  1192                           tblptrl	equ	0xFF6
  1193                           tablat	equ	0xFF5
  1194                           prodh	equ	0xFF4
  1195                           prodl	equ	0xFF3
  1196                           postinc0	equ	0xFEE
  1197                           wreg	equ	0xFE8
  1198                           postdec1	equ	0xFE5
  1199                           fsr1l	equ	0xFE1
  1200                           postinc2	equ	0xFDE
  1201                           postdec2	equ	0xFDD
  1202                           fsr2h	equ	0xFDA
  1203                           fsr2l	equ	0xFD9
  1204                           status	equ	0xFD8
  1205                           
  1206 ;; *************** function ___lwdiv *****************
  1207 ;; Defined at:
  1208 ;;		line 8 in file "/opt/microchip/xc8/v1.37/sources/common/lwdiv.c"
  1209 ;; Parameters:    Size  Location     Type
  1210 ;;  dividend        2   41[COMRAM] unsigned int 
  1211 ;;  divisor         2   43[COMRAM] unsigned int 
  1212 ;; Auto vars:     Size  Location     Type
  1213 ;;  quotient        2    1[BANK0 ] unsigned int 
  1214 ;;  counter         1    0[BANK0 ] unsigned char 
  1215 ;; Return value:  Size  Location     Type
  1216 ;;                  2   41[COMRAM] unsigned int 
  1217 ;; Registers used:
  1218 ;;		wreg, status,2, status,0
  1219 ;; Tracked objects:
  1220 ;;		On entry : 0/0
  1221 ;;		On exit  : 0/0
  1222 ;;		Unchanged: 0/0
  1223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1224 ;;      Params:         4       0       0       0       0       0       0       0       0
  1225 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1226 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1227 ;;      Totals:         4       3       0       0       0       0       0       0       0
  1228 ;;Total ram usage:        7 bytes
  1229 ;; Hardware stack levels used:    1
  1230 ;; Hardware stack levels required when called:    6
  1231 ;; This function calls:
  1232 ;;		Nothing
  1233 ;; This function is called by:
  1234 ;;		_printf
  1235 ;; This function uses a non-reentrant model
  1236 ;;
  1237                           
  1238                           	psect	text5
  1239  000F1C                     __ptext5:
  1240                           	opt stack 0
  1241  000F1C                     ___lwdiv:
  1242                           	opt stack 22
  1243                           
  1244                           ;incstack = 0
  1245  000F1C  0E00               	movlw	0
  1246  000F1E  0100               	movlb	0	; () banked
  1247  000F20  6F62               	movwf	(___lwdiv@quotient+1)& (0+255),b
  1248  000F22  0E00               	movlw	0
  1249  000F24  6F61               	movwf	___lwdiv@quotient& (0+255),b
  1250                           
  1251                           ; BSR set to: 0
  1252  000F26  502C               	movf	___lwdiv@divisor,w,c
  1253  000F28  102D               	iorwf	___lwdiv@divisor+1,w,c
  1254  000F2A  B4D8               	btfsc	status,2,c
  1255  000F2C  D021               	goto	l575
  1256                           
  1257                           ; BSR set to: 0
  1258  000F2E  0E01               	movlw	1
  1259  000F30  0100               	movlb	0	; () banked
  1260  000F32  6F60               	movwf	___lwdiv@counter& (0+255),b
  1261  000F34  D005               	goto	l1424
  1262  000F36                     l1422:
  1263                           
  1264                           ; BSR set to: 0
  1265  000F36  90D8               	bcf	status,0,c
  1266  000F38  362C               	rlcf	___lwdiv@divisor,f,c
  1267  000F3A  362D               	rlcf	___lwdiv@divisor+1,f,c
  1268  000F3C  0100               	movlb	0	; () banked
  1269  000F3E  2B60               	incf	___lwdiv@counter& (0+255),f,b
  1270  000F40                     l1424:
  1271                           
  1272                           ; BSR set to: 0
  1273  000F40  AE2D               	btfss	___lwdiv@divisor+1,7,c
  1274  000F42  D7F9               	goto	l1422
  1275  000F44                     l1426:
  1276                           
  1277                           ; BSR set to: 0
  1278  000F44  0100               	movlb	0	; () banked
  1279  000F46  90D8               	bcf	status,0,c
  1280  000F48  3761               	rlcf	___lwdiv@quotient& (0+255),f,b
  1281  000F4A  3762               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  1282                           
  1283                           ; BSR set to: 0
  1284  000F4C  502C               	movf	___lwdiv@divisor,w,c
  1285  000F4E  5C2A               	subwf	___lwdiv@dividend,w,c
  1286  000F50  502D               	movf	___lwdiv@divisor+1,w,c
  1287  000F52  582B               	subwfb	___lwdiv@dividend+1,w,c
  1288  000F54  A0D8               	btfss	status,0,c
  1289  000F56  D006               	goto	l1434
  1290                           
  1291                           ; BSR set to: 0
  1292  000F58  502C               	movf	___lwdiv@divisor,w,c
  1293  000F5A  5E2A               	subwf	___lwdiv@dividend,f,c
  1294  000F5C  502D               	movf	___lwdiv@divisor+1,w,c
  1295  000F5E  5A2B               	subwfb	___lwdiv@dividend+1,f,c
  1296                           
  1297                           ; BSR set to: 0
  1298  000F60  0100               	movlb	0	; () banked
  1299  000F62  8161               	bsf	___lwdiv@quotient& (0+255),0,b
  1300  000F64                     l1434:
  1301                           
  1302                           ; BSR set to: 0
  1303  000F64  90D8               	bcf	status,0,c
  1304  000F66  322D               	rrcf	___lwdiv@divisor+1,f,c
  1305  000F68  322C               	rrcf	___lwdiv@divisor,f,c
  1306                           
  1307                           ; BSR set to: 0
  1308  000F6A  0100               	movlb	0	; () banked
  1309  000F6C  2F60               	decfsz	___lwdiv@counter& (0+255),f,b
  1310  000F6E  D7EA               	goto	l1426
  1311  000F70                     l575:
  1312                           
  1313                           ; BSR set to: 0
  1314  000F70  C061  F02A         	movff	___lwdiv@quotient,?___lwdiv
  1315  000F74  C062  F02B         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1316                           
  1317                           ; BSR set to: 0
  1318  000F78  0012               	return		;funcret
  1319  000F7A                     __end_of___lwdiv:
  1320                           	opt stack 0
  1321                           tblptru	equ	0xFF8
  1322                           tblptrh	equ	0xFF7
  1323                           tblptrl	equ	0xFF6
  1324                           tablat	equ	0xFF5
  1325                           prodh	equ	0xFF4
  1326                           prodl	equ	0xFF3
  1327                           postinc0	equ	0xFEE
  1328                           wreg	equ	0xFE8
  1329                           postdec1	equ	0xFE5
  1330                           fsr1l	equ	0xFE1
  1331                           postinc2	equ	0xFDE
  1332                           postdec2	equ	0xFDD
  1333                           fsr2h	equ	0xFDA
  1334                           fsr2l	equ	0xFD9
  1335                           status	equ	0xFD8
  1336                           
  1337 ;; *************** function _D_UART_Init *****************
  1338 ;; Defined at:
  1339 ;;		line 176 in file "Drivers/UART_Driver.c"
  1340 ;; Parameters:    Size  Location     Type
  1341 ;;  name            2   14[BANK0 ] PTR const unsigned char 
  1342 ;;		 -> STR_8(6), 
  1343 ;;  baud            2   16[BANK0 ] unsigned int 
  1344 ;;  interrupts      1   18[BANK0 ] unsigned char 
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;		None
  1347 ;; Return value:  Size  Location     Type
  1348 ;;                  1    wreg      void 
  1349 ;; Registers used:
  1350 ;;		wreg, status,2, status,0, cstack
  1351 ;; Tracked objects:
  1352 ;;		On entry : 0/0
  1353 ;;		On exit  : 0/0
  1354 ;;		Unchanged: 0/0
  1355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1356 ;;      Params:         0       5       0       0       0       0       0       0       0
  1357 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1358 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1359 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1360 ;;Total ram usage:        9 bytes
  1361 ;; Hardware stack levels used:    1
  1362 ;; Hardware stack levels required when called:    7
  1363 ;; This function calls:
  1364 ;;		_D_UART_Enable
  1365 ;;		___aldiv
  1366 ;; This function is called by:
  1367 ;;		_main
  1368 ;; This function uses a non-reentrant model
  1369 ;;
  1370                           
  1371                           	psect	text6
  1372  000E18                     __ptext6:
  1373                           	opt stack 0
  1374  000E18                     _D_UART_Init:
  1375                           	opt stack 23
  1376                           
  1377                           ;UART_Driver.c: 178: TRISCbits.TRISC7 = 0;
  1378                           
  1379                           ; BSR set to: 0
  1380                           ;incstack = 0
  1381  000E18  9E94               	bcf	3988,7,c	;volatile
  1382                           
  1383                           ;UART_Driver.c: 179: TRISCbits.TRISC6 = 1;
  1384  000E1A  8C94               	bsf	3988,6,c	;volatile
  1385                           
  1386                           ;UART_Driver.c: 182: deviceName = name;
  1387  000E1C  C06E  F077         	movff	D_UART_Init@name,_deviceName
  1388  000E20  C06F  F078         	movff	D_UART_Init@name+1,_deviceName+1
  1389  000E24  0100               	movlb	0	; () banked
  1390  000E26  5177               	movf	_deviceName& (0+255),w,b
  1391  000E28  1178               	iorwf	(_deviceName+1)& (0+255),w,b
  1392  000E2A  A4D8               	btfss	status,2,c
  1393  000E2C  0E00               	movlw	low (__mediumconst shr (0+16))
  1394  000E2E  6F79               	movwf	(_deviceName+2)& (0+255),b
  1395                           
  1396                           ; BSR set to: 0
  1397                           ;UART_Driver.c: 185: D_UART_Enable(0);
  1398  000E30  0E00               	movlw	0
  1399  000E32  EC35  F008         	call	_D_UART_Enable
  1400                           
  1401                           ;UART_Driver.c: 188: TXSTAbits.TX9 = 0;
  1402  000E36  9CAC               	bcf	4012,6,c	;volatile
  1403                           
  1404                           ;UART_Driver.c: 189: TXSTAbits.SYNC = 0;
  1405  000E38  98AC               	bcf	4012,4,c	;volatile
  1406                           
  1407                           ;UART_Driver.c: 190: TXSTAbits.BRGH = 0;
  1408  000E3A  94AC               	bcf	4012,2,c	;volatile
  1409                           
  1410                           ;UART_Driver.c: 193: RCSTAbits.RX9 = 0;
  1411  000E3C  9CAB               	bcf	4011,6,c	;volatile
  1412                           
  1413                           ;UART_Driver.c: 196: BAUDCONbits.RXDTP = 1;
  1414  000E3E  8AB8               	bsf	4024,5,c	;volatile
  1415                           
  1416                           ;UART_Driver.c: 197: BAUDCONbits.TXCKP = 1;
  1417  000E40  88B8               	bsf	4024,4,c	;volatile
  1418                           
  1419                           ;UART_Driver.c: 198: BAUDCONbits.BRG16 = 0;
  1420  000E42  96B8               	bcf	4024,3,c	;volatile
  1421                           
  1422                           ;UART_Driver.c: 203: SPBRG = ((10000000/baud)/64)-1;
  1423  000E44  C070  F064         	movff	D_UART_Init@baud,___aldiv@divisor
  1424  000E48  C071  F065         	movff	D_UART_Init@baud+1,___aldiv@divisor+1
  1425  000E4C  0100               	movlb	0	; () banked
  1426  000E4E  6B66               	clrf	(___aldiv@divisor+2)& (0+255),b
  1427  000E50  6B67               	clrf	(___aldiv@divisor+3)& (0+255),b
  1428  000E52  0E80               	movlw	128
  1429  000E54  0100               	movlb	0	; () banked
  1430  000E56  6F60               	movwf	___aldiv@dividend& (0+255),b
  1431  000E58  0E96               	movlw	150
  1432  000E5A  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  1433  000E5C  0E98               	movlw	152
  1434  000E5E  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  1435  000E60  0E00               	movlw	0
  1436  000E62  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  1437  000E64  EC16  F006         	call	___aldiv	;wreg free
  1438  000E68  C060  F073         	movff	?___aldiv,_D_UART_Init$1270
  1439  000E6C  C061  F074         	movff	?___aldiv+1,_D_UART_Init$1270+1
  1440  000E70  C062  F075         	movff	?___aldiv+2,_D_UART_Init$1270+2
  1441  000E74  C063  F076         	movff	?___aldiv+3,_D_UART_Init$1270+3
  1442                           
  1443                           ;UART_Driver.c: 203: SPBRG = ((10000000/baud)/64)-1;
  1444  000E78  C073  F060         	movff	_D_UART_Init$1270,___aldiv@dividend
  1445  000E7C  C074  F061         	movff	_D_UART_Init$1270+1,___aldiv@dividend+1
  1446  000E80  C075  F062         	movff	_D_UART_Init$1270+2,___aldiv@dividend+2
  1447  000E84  C076  F063         	movff	_D_UART_Init$1270+3,___aldiv@dividend+3
  1448  000E88  0E40               	movlw	64
  1449  000E8A  0100               	movlb	0	; () banked
  1450  000E8C  6F64               	movwf	___aldiv@divisor& (0+255),b
  1451  000E8E  0E00               	movlw	0
  1452  000E90  6F65               	movwf	(___aldiv@divisor+1)& (0+255),b
  1453  000E92  0E00               	movlw	0
  1454  000E94  6F66               	movwf	(___aldiv@divisor+2)& (0+255),b
  1455  000E96  0E00               	movlw	0
  1456  000E98  6F67               	movwf	(___aldiv@divisor+3)& (0+255),b
  1457  000E9A  EC16  F006         	call	___aldiv	;wreg free
  1458  000E9E  0100               	movlb	0	; () banked
  1459  000EA0  0560               	decf	?___aldiv& (0+255),w,b
  1460  000EA2  6EAF               	movwf	4015,c	;volatile
  1461                           
  1462                           ; BSR set to: 0
  1463                           ;UART_Driver.c: 206: if (interrupts) {
  1464  000EA4  0100               	movlb	0	; () banked
  1465  000EA6  5172               	movf	D_UART_Init@interrupts& (0+255),w,b
  1466  000EA8  0100               	movlb	0	; () banked
  1467  000EAA  B4D8               	btfsc	status,2,c
  1468  000EAC  0012               	return	
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;UART_Driver.c: 207: RCONbits.IPEN = 1;
  1472  000EAE  8ED0               	bsf	4048,7,c	;volatile
  1473                           
  1474                           ;UART_Driver.c: 208: INTCONbits.GIEH = 1;
  1475  000EB0  8EF2               	bsf	intcon,7,c	;volatile
  1476                           
  1477                           ;UART_Driver.c: 209: INTCONbits.GIEL = 1;
  1478  000EB2  8CF2               	bsf	intcon,6,c	;volatile
  1479                           
  1480                           ;UART_Driver.c: 210: PIR1bits.RCIF = 0;
  1481  000EB4  9A9E               	bcf	3998,5,c	;volatile
  1482                           
  1483                           ;UART_Driver.c: 211: IPR1bits.RCIP = 0;
  1484  000EB6  9A9F               	bcf	3999,5,c	;volatile
  1485                           
  1486                           ;UART_Driver.c: 212: PIE1bits.RCIE = 1;
  1487  000EB8  8A9D               	bsf	3997,5,c	;volatile
  1488  000EBA  0012               	return	
  1489  000EBC                     __end_of_D_UART_Init:
  1490                           	opt stack 0
  1491                           tblptru	equ	0xFF8
  1492                           tblptrh	equ	0xFF7
  1493                           tblptrl	equ	0xFF6
  1494                           tablat	equ	0xFF5
  1495                           prodh	equ	0xFF4
  1496                           prodl	equ	0xFF3
  1497                           intcon	equ	0xFF2
  1498                           postinc0	equ	0xFEE
  1499                           wreg	equ	0xFE8
  1500                           postdec1	equ	0xFE5
  1501                           fsr1l	equ	0xFE1
  1502                           postinc2	equ	0xFDE
  1503                           postdec2	equ	0xFDD
  1504                           fsr2h	equ	0xFDA
  1505                           fsr2l	equ	0xFD9
  1506                           status	equ	0xFD8
  1507                           
  1508 ;; *************** function ___aldiv *****************
  1509 ;; Defined at:
  1510 ;;		line 8 in file "/opt/microchip/xc8/v1.37/sources/common/aldiv.c"
  1511 ;; Parameters:    Size  Location     Type
  1512 ;;  dividend        4    0[BANK0 ] long 
  1513 ;;  divisor         4    4[BANK0 ] long 
  1514 ;; Auto vars:     Size  Location     Type
  1515 ;;  quotient        4   10[BANK0 ] long 
  1516 ;;  sign            1    9[BANK0 ] unsigned char 
  1517 ;;  counter         1    8[BANK0 ] unsigned char 
  1518 ;; Return value:  Size  Location     Type
  1519 ;;                  4    0[BANK0 ] long 
  1520 ;; Registers used:
  1521 ;;		wreg, status,2, status,0
  1522 ;; Tracked objects:
  1523 ;;		On entry : 0/0
  1524 ;;		On exit  : 0/0
  1525 ;;		Unchanged: 0/0
  1526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1527 ;;      Params:         0       8       0       0       0       0       0       0       0
  1528 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1529 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1530 ;;      Totals:         0      14       0       0       0       0       0       0       0
  1531 ;;Total ram usage:       14 bytes
  1532 ;; Hardware stack levels used:    1
  1533 ;; Hardware stack levels required when called:    6
  1534 ;; This function calls:
  1535 ;;		Nothing
  1536 ;; This function is called by:
  1537 ;;		_D_UART_Init
  1538 ;; This function uses a non-reentrant model
  1539 ;;
  1540                           
  1541                           	psect	text7
  1542  000C2C                     __ptext7:
  1543                           	opt stack 0
  1544  000C2C                     ___aldiv:
  1545                           	opt stack 23
  1546                           
  1547                           ; BSR set to: 0
  1548                           ;incstack = 0
  1549  000C2C  0E00               	movlw	0
  1550  000C2E  0100               	movlb	0	; () banked
  1551  000C30  6F69               	movwf	___aldiv@sign& (0+255),b
  1552                           
  1553                           ; BSR set to: 0
  1554  000C32  0100               	movlb	0	; () banked
  1555  000C34  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1556  000C36  D00C               	goto	l1492
  1557                           
  1558                           ; BSR set to: 0
  1559  000C38  0100               	movlb	0	; () banked
  1560  000C3A  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
  1561  000C3C  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
  1562  000C3E  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
  1563  000C40  6D64               	negf	___aldiv@divisor& (0+255),b
  1564  000C42  0E00               	movlw	0
  1565  000C44  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  1566  000C46  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  1567  000C48  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  1568                           
  1569                           ; BSR set to: 0
  1570  000C4A  0E01               	movlw	1
  1571  000C4C  0100               	movlb	0	; () banked
  1572  000C4E  6F69               	movwf	___aldiv@sign& (0+255),b
  1573  000C50                     l1492:
  1574                           
  1575                           ; BSR set to: 0
  1576  000C50  0100               	movlb	0	; () banked
  1577  000C52  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  1578  000C54  D00C               	goto	l1498
  1579                           
  1580                           ; BSR set to: 0
  1581  000C56  0100               	movlb	0	; () banked
  1582  000C58  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
  1583  000C5A  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
  1584  000C5C  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
  1585  000C5E  6D60               	negf	___aldiv@dividend& (0+255),b
  1586  000C60  0E00               	movlw	0
  1587  000C62  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  1588  000C64  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  1589  000C66  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  1590                           
  1591                           ; BSR set to: 0
  1592  000C68  0E01               	movlw	1
  1593  000C6A  0100               	movlb	0	; () banked
  1594  000C6C  1B69               	xorwf	___aldiv@sign& (0+255),f,b
  1595  000C6E                     l1498:
  1596                           
  1597                           ; BSR set to: 0
  1598  000C6E  0E00               	movlw	0
  1599  000C70  0100               	movlb	0	; () banked
  1600  000C72  6F6A               	movwf	___aldiv@quotient& (0+255),b
  1601  000C74  0E00               	movlw	0
  1602  000C76  6F6B               	movwf	(___aldiv@quotient+1)& (0+255),b
  1603  000C78  0E00               	movlw	0
  1604  000C7A  6F6C               	movwf	(___aldiv@quotient+2)& (0+255),b
  1605  000C7C  0E00               	movlw	0
  1606  000C7E  6F6D               	movwf	(___aldiv@quotient+3)& (0+255),b
  1607                           
  1608                           ; BSR set to: 0
  1609  000C80  0100               	movlb	0	; () banked
  1610  000C82  5164               	movf	___aldiv@divisor& (0+255),w,b
  1611  000C84  0100               	movlb	0	; () banked
  1612  000C86  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  1613  000C88  0100               	movlb	0	; () banked
  1614  000C8A  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  1615  000C8C  0100               	movlb	0	; () banked
  1616  000C8E  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  1617  000C90  B4D8               	btfsc	status,2,c
  1618  000C92  D042               	goto	l1520
  1619                           
  1620                           ; BSR set to: 0
  1621  000C94  0E01               	movlw	1
  1622  000C96  0100               	movlb	0	; () banked
  1623  000C98  6F68               	movwf	___aldiv@counter& (0+255),b
  1624  000C9A  D008               	goto	l1506
  1625  000C9C                     l1504:
  1626                           
  1627                           ; BSR set to: 0
  1628  000C9C  0100               	movlb	0	; () banked
  1629  000C9E  90D8               	bcf	status,0,c
  1630  000CA0  3764               	rlcf	___aldiv@divisor& (0+255),f,b
  1631  000CA2  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  1632  000CA4  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  1633  000CA6  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  1634  000CA8  0100               	movlb	0	; () banked
  1635  000CAA  2B68               	incf	___aldiv@counter& (0+255),f,b
  1636  000CAC                     l1506:
  1637                           
  1638                           ; BSR set to: 0
  1639  000CAC  0100               	movlb	0	; () banked
  1640  000CAE  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1641  000CB0  D7F5               	goto	l1504
  1642  000CB2                     l1508:
  1643                           
  1644                           ; BSR set to: 0
  1645  000CB2  0100               	movlb	0	; () banked
  1646  000CB4  90D8               	bcf	status,0,c
  1647  000CB6  376A               	rlcf	___aldiv@quotient& (0+255),f,b
  1648  000CB8  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1649  000CBA  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1650  000CBC  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1651                           
  1652                           ; BSR set to: 0
  1653  000CBE  0100               	movlb	0	; () banked
  1654  000CC0  5164               	movf	___aldiv@divisor& (0+255),w,b
  1655  000CC2  0100               	movlb	0	; () banked
  1656  000CC4  5D60               	subwf	___aldiv@dividend& (0+255),w,b
  1657  000CC6  0100               	movlb	0	; () banked
  1658  000CC8  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1659  000CCA  0100               	movlb	0	; () banked
  1660  000CCC  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  1661  000CCE  0100               	movlb	0	; () banked
  1662  000CD0  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1663  000CD2  0100               	movlb	0	; () banked
  1664  000CD4  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  1665  000CD6  0100               	movlb	0	; () banked
  1666  000CD8  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1667  000CDA  0100               	movlb	0	; () banked
  1668  000CDC  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  1669  000CDE  A0D8               	btfss	status,0,c
  1670  000CE0  D012               	goto	l1516
  1671                           
  1672                           ; BSR set to: 0
  1673  000CE2  0100               	movlb	0	; () banked
  1674  000CE4  5164               	movf	___aldiv@divisor& (0+255),w,b
  1675  000CE6  0100               	movlb	0	; () banked
  1676  000CE8  5F60               	subwf	___aldiv@dividend& (0+255),f,b
  1677  000CEA  0100               	movlb	0	; () banked
  1678  000CEC  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1679  000CEE  0100               	movlb	0	; () banked
  1680  000CF0  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  1681  000CF2  0100               	movlb	0	; () banked
  1682  000CF4  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1683  000CF6  0100               	movlb	0	; () banked
  1684  000CF8  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  1685  000CFA  0100               	movlb	0	; () banked
  1686  000CFC  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1687  000CFE  0100               	movlb	0	; () banked
  1688  000D00  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  1689                           
  1690                           ; BSR set to: 0
  1691  000D02  0100               	movlb	0	; () banked
  1692  000D04  816A               	bsf	___aldiv@quotient& (0+255),0,b
  1693  000D06                     l1516:
  1694                           
  1695                           ; BSR set to: 0
  1696  000D06  0100               	movlb	0	; () banked
  1697  000D08  90D8               	bcf	status,0,c
  1698  000D0A  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  1699  000D0C  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  1700  000D0E  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  1701  000D10  3364               	rrcf	___aldiv@divisor& (0+255),f,b
  1702                           
  1703                           ; BSR set to: 0
  1704  000D12  0100               	movlb	0	; () banked
  1705  000D14  2F68               	decfsz	___aldiv@counter& (0+255),f,b
  1706  000D16  D7CD               	goto	l1508
  1707  000D18                     l1520:
  1708                           
  1709                           ; BSR set to: 0
  1710  000D18  0100               	movlb	0	; () banked
  1711  000D1A  5169               	movf	___aldiv@sign& (0+255),w,b
  1712  000D1C  0100               	movlb	0	; () banked
  1713  000D1E  B4D8               	btfsc	status,2,c
  1714  000D20  D009               	goto	l1524
  1715                           
  1716                           ; BSR set to: 0
  1717  000D22  0100               	movlb	0	; () banked
  1718  000D24  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1719  000D26  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1720  000D28  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1721  000D2A  6D6A               	negf	___aldiv@quotient& (0+255),b
  1722  000D2C  0E00               	movlw	0
  1723  000D2E  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1724  000D30  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1725  000D32  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1726  000D34                     l1524:
  1727                           
  1728                           ; BSR set to: 0
  1729  000D34  C06A  F060         	movff	___aldiv@quotient,?___aldiv
  1730  000D38  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
  1731  000D3C  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
  1732  000D40  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
  1733  000D44  0012               	return	
  1734  000D46                     __end_of___aldiv:
  1735                           	opt stack 0
  1736                           tblptru	equ	0xFF8
  1737                           tblptrh	equ	0xFF7
  1738                           tblptrl	equ	0xFF6
  1739                           tablat	equ	0xFF5
  1740                           prodh	equ	0xFF4
  1741                           prodl	equ	0xFF3
  1742                           intcon	equ	0xFF2
  1743                           postinc0	equ	0xFEE
  1744                           wreg	equ	0xFE8
  1745                           postdec1	equ	0xFE5
  1746                           fsr1l	equ	0xFE1
  1747                           postinc2	equ	0xFDE
  1748                           postdec2	equ	0xFDD
  1749                           fsr2h	equ	0xFDA
  1750                           fsr2l	equ	0xFD9
  1751                           status	equ	0xFD8
  1752                           
  1753 ;; *************** function _D_UART_Enable *****************
  1754 ;; Defined at:
  1755 ;;		line 234 in file "Drivers/UART_Driver.c"
  1756 ;; Parameters:    Size  Location     Type
  1757 ;;  enable          1    wreg     unsigned char 
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;  enable          1   41[COMRAM] unsigned char 
  1760 ;; Return value:  Size  Location     Type
  1761 ;;                  1    wreg      void 
  1762 ;; Registers used:
  1763 ;;		wreg, status,2
  1764 ;; Tracked objects:
  1765 ;;		On entry : 0/0
  1766 ;;		On exit  : 0/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1769 ;;      Params:         0       0       0       0       0       0       0       0       0
  1770 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1771 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1772 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1773 ;;Total ram usage:        1 bytes
  1774 ;; Hardware stack levels used:    1
  1775 ;; Hardware stack levels required when called:    6
  1776 ;; This function calls:
  1777 ;;		Nothing
  1778 ;; This function is called by:
  1779 ;;		_D_UART_Init
  1780 ;;		_main
  1781 ;; This function uses a non-reentrant model
  1782 ;;
  1783                           
  1784                           	psect	text8
  1785  00106A                     __ptext8:
  1786                           	opt stack 0
  1787  00106A                     _D_UART_Enable:
  1788                           	opt stack 23
  1789                           
  1790                           ; BSR set to: 0
  1791                           ;incstack = 0
  1792                           ;D_UART_Enable@enable stored from wreg
  1793  00106A  6E2A               	movwf	D_UART_Enable@enable,c
  1794                           
  1795                           ;UART_Driver.c: 235: if(enable) {
  1796  00106C  502A               	movf	D_UART_Enable@enable,w,c
  1797  00106E  B4D8               	btfsc	status,2,c
  1798  001070  D006               	goto	l105
  1799                           
  1800                           ;UART_Driver.c: 236: TRISCbits.TRISC7 = 0;
  1801  001072  9E94               	bcf	3988,7,c	;volatile
  1802                           
  1803                           ;UART_Driver.c: 237: TRISCbits.TRISC6 = 1;
  1804  001074  8C94               	bsf	3988,6,c	;volatile
  1805                           
  1806                           ;UART_Driver.c: 238: TXSTAbits.TXEN = 1;
  1807  001076  8AAC               	bsf	4012,5,c	;volatile
  1808                           
  1809                           ;UART_Driver.c: 239: RCSTAbits.CREN = 1;
  1810  001078  88AB               	bsf	4011,4,c	;volatile
  1811                           
  1812                           ;UART_Driver.c: 240: RCSTAbits.SPEN = 1;
  1813  00107A  8EAB               	bsf	4011,7,c	;volatile
  1814                           
  1815                           ;UART_Driver.c: 241: } else {
  1816  00107C  0012               	return	
  1817  00107E                     l105:
  1818                           
  1819                           ;UART_Driver.c: 242: TRISCbits.TRISC7 = 0;
  1820  00107E  9E94               	bcf	3988,7,c	;volatile
  1821                           
  1822                           ;UART_Driver.c: 243: TRISCbits.TRISC6 = 0;
  1823  001080  9C94               	bcf	3988,6,c	;volatile
  1824                           
  1825                           ;UART_Driver.c: 244: TXSTAbits.TXEN = 0;
  1826  001082  9AAC               	bcf	4012,5,c	;volatile
  1827                           
  1828                           ;UART_Driver.c: 245: RCSTAbits.CREN = 0;
  1829  001084  98AB               	bcf	4011,4,c	;volatile
  1830                           
  1831                           ;UART_Driver.c: 246: RCSTAbits.SPEN = 0;
  1832  001086  9EAB               	bcf	4011,7,c	;volatile
  1833  001088  0012               	return	
  1834  00108A                     __end_of_D_UART_Enable:
  1835                           	opt stack 0
  1836                           tblptru	equ	0xFF8
  1837                           tblptrh	equ	0xFF7
  1838                           tblptrl	equ	0xFF6
  1839                           tablat	equ	0xFF5
  1840                           prodh	equ	0xFF4
  1841                           prodl	equ	0xFF3
  1842                           intcon	equ	0xFF2
  1843                           postinc0	equ	0xFEE
  1844                           wreg	equ	0xFE8
  1845                           postdec1	equ	0xFE5
  1846                           fsr1l	equ	0xFE1
  1847                           postinc2	equ	0xFDE
  1848                           postdec2	equ	0xFDD
  1849                           fsr2h	equ	0xFDA
  1850                           fsr2l	equ	0xFD9
  1851                           status	equ	0xFD8
  1852                           
  1853 ;; *************** function _D_PORT_Init *****************
  1854 ;; Defined at:
  1855 ;;		line 32 in file "Drivers/PORT_Driver.c"
  1856 ;; Parameters:    Size  Location     Type
  1857 ;;		None
  1858 ;; Auto vars:     Size  Location     Type
  1859 ;;		None
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  1    wreg      void 
  1862 ;; Registers used:
  1863 ;;		wreg, status,2
  1864 ;; Tracked objects:
  1865 ;;		On entry : 0/0
  1866 ;;		On exit  : 0/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1869 ;;      Params:         0       0       0       0       0       0       0       0       0
  1870 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1871 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1872 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1873 ;;Total ram usage:        0 bytes
  1874 ;; Hardware stack levels used:    1
  1875 ;; Hardware stack levels required when called:    6
  1876 ;; This function calls:
  1877 ;;		Nothing
  1878 ;; This function is called by:
  1879 ;;		_main
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883                           	psect	text9
  1884  00108A                     __ptext9:
  1885                           	opt stack 0
  1886  00108A                     _D_PORT_Init:
  1887                           	opt stack 24
  1888                           
  1889                           ;PORT_Driver.c: 33: TRISA = 0x00; PORTA = 0x00;
  1890                           
  1891                           ;incstack = 0
  1892  00108A  0E00               	movlw	0
  1893  00108C  6E92               	movwf	3986,c	;volatile
  1894  00108E  0E00               	movlw	0
  1895  001090  6E80               	movwf	3968,c	;volatile
  1896                           
  1897                           ;PORT_Driver.c: 34: TRISB = 0x00; PORTB = 0x00;
  1898  001092  0E00               	movlw	0
  1899  001094  6E93               	movwf	3987,c	;volatile
  1900  001096  0E00               	movlw	0
  1901  001098  6E81               	movwf	3969,c	;volatile
  1902                           
  1903                           ;PORT_Driver.c: 35: TRISC = 0x00; PORTC = 0x00;
  1904  00109A  0E00               	movlw	0
  1905  00109C  6E94               	movwf	3988,c	;volatile
  1906  00109E  0E00               	movlw	0
  1907  0010A0  6E82               	movwf	3970,c	;volatile
  1908                           
  1909                           ;PORT_Driver.c: 38: ADCON1 = 0x0F;
  1910  0010A2  0E0F               	movlw	15
  1911  0010A4  6EC1               	movwf	4033,c	;volatile
  1912  0010A6  0012               	return		;funcret
  1913  0010A8                     __end_of_D_PORT_Init:
  1914                           	opt stack 0
  1915                           tblptru	equ	0xFF8
  1916                           tblptrh	equ	0xFF7
  1917                           tblptrl	equ	0xFF6
  1918                           tablat	equ	0xFF5
  1919                           prodh	equ	0xFF4
  1920                           prodl	equ	0xFF3
  1921                           intcon	equ	0xFF2
  1922                           postinc0	equ	0xFEE
  1923                           wreg	equ	0xFE8
  1924                           postdec1	equ	0xFE5
  1925                           fsr1l	equ	0xFE1
  1926                           postinc2	equ	0xFDE
  1927                           postdec2	equ	0xFDD
  1928                           fsr2h	equ	0xFDA
  1929                           fsr2l	equ	0xFD9
  1930                           status	equ	0xFD8
  1931                           
  1932 ;; *************** function _LowISR *****************
  1933 ;; Defined at:
  1934 ;;		line 254 in file "Drivers/UART_Driver.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;		None
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;		None
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  1    wreg      void 
  1941 ;; Registers used:
  1942 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1948 ;;      Params:         0       0       0       0       0       0       0       0       0
  1949 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1950 ;;      Temps:         17       0       0       0       0       0       0       0       0
  1951 ;;      Totals:        17       0       0       0       0       0       0       0       0
  1952 ;;Total ram usage:       17 bytes
  1953 ;; Hardware stack levels used:    1
  1954 ;; Hardware stack levels required when called:    5
  1955 ;; This function calls:
  1956 ;;		_fillDataBuffer
  1957 ;;		_readByte
  1958 ;; This function is called by:
  1959 ;;		Interrupt level 1
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           	psect	intcodelo
  1964  000018                     __pintcodelo:
  1965                           	opt stack 0
  1966  000018                     _LowISR:
  1967                           	opt stack 21
  1968                           
  1969                           ;incstack = 0
  1970  000018  8036               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  1971  00001A  CFD8 F019          	movff	status,??_LowISR
  1972  00001E  CFE8 F01A          	movff	wreg,??_LowISR+1
  1973  000022  CFE0 F01B          	movff	bsr,??_LowISR+2
  1974  000026  CFFA F01C          	movff	pclath,??_LowISR+3
  1975  00002A  CFFB F01D          	movff	pclatu,??_LowISR+4
  1976  00002E  CFE9 F01E          	movff	fsr0l,??_LowISR+5
  1977  000032  CFEA F01F          	movff	fsr0h,??_LowISR+6
  1978  000036  CFE1 F020          	movff	fsr1l,??_LowISR+7
  1979  00003A  CFE2 F021          	movff	fsr1h,??_LowISR+8
  1980  00003E  CFD9 F022          	movff	fsr2l,??_LowISR+9
  1981  000042  CFDA F023          	movff	fsr2h,??_LowISR+10
  1982  000046  CFF3 F024          	movff	prodl,??_LowISR+11
  1983  00004A  CFF4 F025          	movff	prodh,??_LowISR+12
  1984  00004E  CFF6 F026          	movff	tblptrl,??_LowISR+13
  1985  000052  CFF7 F027          	movff	tblptrh,??_LowISR+14
  1986  000056  CFF8 F028          	movff	tblptru,??_LowISR+15
  1987  00005A  CFF5 F029          	movff	tablat,??_LowISR+16
  1988                           
  1989                           ;UART_Driver.c: 255: if (PIR1bits.RC1IF) {
  1990  00005E  AA9E               	btfss	3998,5,c	;volatile
  1991  000060  D005               	goto	i1l114
  1992                           
  1993                           ;UART_Driver.c: 256: fillDataBuffer(readByte());
  1994  000062  EC6A  F008         	call	_readByte	;wreg free
  1995  000066  EC1D  F004         	call	_fillDataBuffer
  1996                           
  1997                           ;UART_Driver.c: 257: PIR1bits.RC1IF = 0;
  1998  00006A  9A9E               	bcf	3998,5,c	;volatile
  1999  00006C                     i1l114:
  2000  00006C  C029  FFF5         	movff	??_LowISR+16,tablat
  2001  000070  C028  FFF8         	movff	??_LowISR+15,tblptru
  2002  000074  C027  FFF7         	movff	??_LowISR+14,tblptrh
  2003  000078  C026  FFF6         	movff	??_LowISR+13,tblptrl
  2004  00007C  C025  FFF4         	movff	??_LowISR+12,prodh
  2005  000080  C024  FFF3         	movff	??_LowISR+11,prodl
  2006  000084  C023  FFDA         	movff	??_LowISR+10,fsr2h
  2007  000088  C022  FFD9         	movff	??_LowISR+9,fsr2l
  2008  00008C  C021  FFE2         	movff	??_LowISR+8,fsr1h
  2009  000090  C020  FFE1         	movff	??_LowISR+7,fsr1l
  2010  000094  C01F  FFEA         	movff	??_LowISR+6,fsr0h
  2011  000098  C01E  FFE9         	movff	??_LowISR+5,fsr0l
  2012  00009C  C01D  FFFB         	movff	??_LowISR+4,pclatu
  2013  0000A0  C01C  FFFA         	movff	??_LowISR+3,pclath
  2014  0000A4  C01B  FFE0         	movff	??_LowISR+2,bsr
  2015  0000A8  C01A  FFE8         	movff	??_LowISR+1,wreg
  2016  0000AC  C019  FFD8         	movff	??_LowISR,status
  2017  0000B0  9036               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  2018  0000B2  0010               	retfie	
  2019  0000B4                     __end_of_LowISR:
  2020                           	opt stack 0
  2021                           pclatu	equ	0xFFB
  2022                           pclath	equ	0xFFA
  2023                           tblptru	equ	0xFF8
  2024                           tblptrh	equ	0xFF7
  2025                           tblptrl	equ	0xFF6
  2026                           tablat	equ	0xFF5
  2027                           prodh	equ	0xFF4
  2028                           prodl	equ	0xFF3
  2029                           intcon	equ	0xFF2
  2030                           postinc0	equ	0xFEE
  2031                           fsr0h	equ	0xFEA
  2032                           fsr0l	equ	0xFE9
  2033                           wreg	equ	0xFE8
  2034                           postdec1	equ	0xFE5
  2035                           fsr1h	equ	0xFE2
  2036                           fsr1l	equ	0xFE1
  2037                           bsr	equ	0xFE0
  2038                           postinc2	equ	0xFDE
  2039                           postdec2	equ	0xFDD
  2040                           fsr2h	equ	0xFDA
  2041                           fsr2l	equ	0xFD9
  2042                           status	equ	0xFD8
  2043                           
  2044 ;; *************** function _readByte *****************
  2045 ;; Defined at:
  2046 ;;		line 70 in file "Drivers/UART_Driver.c"
  2047 ;; Parameters:    Size  Location     Type
  2048 ;;		None
  2049 ;; Auto vars:     Size  Location     Type
  2050 ;;		None
  2051 ;; Return value:  Size  Location     Type
  2052 ;;                  1    wreg      unsigned char 
  2053 ;; Registers used:
  2054 ;;		wreg, status,2
  2055 ;; Tracked objects:
  2056 ;;		On entry : 0/0
  2057 ;;		On exit  : 0/0
  2058 ;;		Unchanged: 0/0
  2059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2060 ;;      Params:         0       0       0       0       0       0       0       0       0
  2061 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2062 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2063 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2064 ;;Total ram usage:        0 bytes
  2065 ;; Hardware stack levels used:    1
  2066 ;; This function calls:
  2067 ;;		Nothing
  2068 ;; This function is called by:
  2069 ;;		_LowISR
  2070 ;; This function uses a non-reentrant model
  2071 ;;
  2072                           
  2073                           	psect	text11
  2074  0010D4                     __ptext11:
  2075                           	opt stack 0
  2076  0010D4                     _readByte:
  2077                           	opt stack 25
  2078                           
  2079                           ;UART_Driver.c: 71: if(RCSTAbits.FERR == 1) {
  2080                           
  2081                           ;incstack = 0
  2082  0010D4  50AB               	movf	4011,w,c	;volatile
  2083                           
  2084                           ;UART_Driver.c: 73: }
  2085                           ;UART_Driver.c: 74: if(RCSTAbits.OERR == 1) {
  2086  0010D6  50AB               	movf	4011,w,c	;volatile
  2087                           
  2088                           ;UART_Driver.c: 76: }
  2089                           ;UART_Driver.c: 77: return RCREG;
  2090  0010D8  50AE               	movf	4014,w,c	;volatile
  2091  0010DA  0012               	return	
  2092  0010DC                     __end_of_readByte:
  2093                           	opt stack 0
  2094                           pclatu	equ	0xFFB
  2095                           pclath	equ	0xFFA
  2096                           tblptru	equ	0xFF8
  2097                           tblptrh	equ	0xFF7
  2098                           tblptrl	equ	0xFF6
  2099                           tablat	equ	0xFF5
  2100                           prodh	equ	0xFF4
  2101                           prodl	equ	0xFF3
  2102                           intcon	equ	0xFF2
  2103                           postinc0	equ	0xFEE
  2104                           fsr0h	equ	0xFEA
  2105                           fsr0l	equ	0xFE9
  2106                           wreg	equ	0xFE8
  2107                           postdec1	equ	0xFE5
  2108                           fsr1h	equ	0xFE2
  2109                           fsr1l	equ	0xFE1
  2110                           bsr	equ	0xFE0
  2111                           postinc2	equ	0xFDE
  2112                           postdec2	equ	0xFDD
  2113                           fsr2h	equ	0xFDA
  2114                           fsr2l	equ	0xFD9
  2115                           status	equ	0xFD8
  2116                           
  2117 ;; *************** function _fillDataBuffer *****************
  2118 ;; Defined at:
  2119 ;;		line 80 in file "Drivers/UART_Driver.c"
  2120 ;; Parameters:    Size  Location     Type
  2121 ;;  data            1    wreg     unsigned char 
  2122 ;; Auto vars:     Size  Location     Type
  2123 ;;  data            1   23[COMRAM] unsigned char 
  2124 ;; Return value:  Size  Location     Type
  2125 ;;                  1    wreg      void 
  2126 ;; Registers used:
  2127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2128 ;; Tracked objects:
  2129 ;;		On entry : 0/0
  2130 ;;		On exit  : 0/0
  2131 ;;		Unchanged: 0/0
  2132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2133 ;;      Params:         0       0       0       0       0       0       0       0       0
  2134 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2135 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2136 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2137 ;;Total ram usage:        1 bytes
  2138 ;; Hardware stack levels used:    1
  2139 ;; Hardware stack levels required when called:    4
  2140 ;; This function calls:
  2141 ;;		_acknowledge
  2142 ;; This function is called by:
  2143 ;;		_LowISR
  2144 ;; This function uses a non-reentrant model
  2145 ;;
  2146                           
  2147                           	psect	text12
  2148  00083A                     __ptext12:
  2149                           	opt stack 0
  2150  00083A                     _fillDataBuffer:
  2151                           	opt stack 21
  2152                           
  2153                           ;incstack = 0
  2154                           ;fillDataBuffer@data stored from wreg
  2155  00083A  6E18               	movwf	fillDataBuffer@data,c
  2156                           
  2157                           ;UART_Driver.c: 81: switch(readBuffer.state) {
  2158  00083C  D09B               	goto	i1l1368
  2159  00083E                     i1l1298:
  2160                           
  2161                           ;UART_Driver.c: 83: if(data == 0x26) {
  2162  00083E  0E26               	movlw	38
  2163  000840  1818               	xorwf	fillDataBuffer@data,w,c
  2164  000842  A4D8               	btfss	status,2,c
  2165  000844  D010               	goto	i1l1302
  2166                           
  2167                           ;UART_Driver.c: 84: readBuffer.typeCnt = 0;
  2168  000846  0E00               	movlw	0
  2169  000848  0101               	movlb	1	; () banked
  2170  00084A  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  2171                           
  2172                           ;UART_Driver.c: 85: readBuffer.senderCnt = 0;
  2173  00084C  0E00               	movlw	0
  2174  00084E  0101               	movlb	1	; () banked
  2175  000850  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  2176                           
  2177                           ;UART_Driver.c: 86: readBuffer.commandCnt = 0;
  2178  000852  0E00               	movlw	0
  2179  000854  0101               	movlb	1	; () banked
  2180  000856  6F70               	movwf	(_readBuffer+112)& (0+255),b
  2181                           
  2182                           ;UART_Driver.c: 87: readBuffer.messageCnt = 0;
  2183  000858  0E00               	movlw	0
  2184  00085A  0101               	movlb	1	; () banked
  2185  00085C  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  2186                           
  2187                           ;UART_Driver.c: 88: readReady = 0;
  2188  00085E  0E00               	movlw	0
  2189  000860  6E35               	movwf	_readReady,c
  2190                           
  2191                           ;UART_Driver.c: 89: readBuffer.state = 0x01;
  2192  000862  0E01               	movlw	1
  2193  000864  D079               	goto	L5
  2194  000866                     i1l1302:
  2195                           
  2196                           ;UART_Driver.c: 91: readBuffer.state = 0x00;
  2197  000866  0E00               	movlw	0
  2198  000868  0101               	movlb	1	; () banked
  2199  00086A  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2200                           
  2201                           ; BSR set to: 1
  2202                           ;UART_Driver.c: 92: return;
  2203  00086C  0012               	return	
  2204  00086E                     i1l1306:
  2205                           
  2206                           ; BSR set to: 1
  2207                           ;UART_Driver.c: 97: if (data == 0x3A) {
  2208  00086E  0E3A               	movlw	58
  2209  000870  1818               	xorwf	fillDataBuffer@data,w,c
  2210  000872  A4D8               	btfss	status,2,c
  2211  000874  D002               	goto	i1l1310
  2212                           
  2213                           ; BSR set to: 1
  2214                           ;UART_Driver.c: 98: readBuffer.state = 0x02;
  2215  000876  0E02               	movlw	2
  2216  000878  D06F               	goto	L5
  2217  00087A                     i1l1310:
  2218                           
  2219                           ; BSR set to: 1
  2220                           ;UART_Driver.c: 100: readBuffer.type[readBuffer.typeCnt] = data;
  2221  00087A  0101               	movlb	1	; () banked
  2222  00087C  510A               	movf	(_readBuffer+10)& (0+255),w,b
  2223  00087E  0D01               	mullw	1
  2224  000880  0E00               	movlw	low _readBuffer
  2225  000882  24F3               	addwf	prodl,w,c
  2226  000884  6ED9               	movwf	fsr2l,c
  2227  000886  0E01               	movlw	high _readBuffer
  2228  000888  20F4               	addwfc	prodh,w,c
  2229  00088A  6EDA               	movwf	fsr2h,c
  2230  00088C  C018  FFDF         	movff	fillDataBuffer@data,indf2
  2231                           
  2232                           ; BSR set to: 1
  2233                           ;UART_Driver.c: 101: readBuffer.typeCnt++;
  2234  000890  0101               	movlb	1	; () banked
  2235  000892  2B0A               	incf	(_readBuffer+10)& (0+255),f,b
  2236                           
  2237                           ; BSR set to: 1
  2238                           ;UART_Driver.c: 102: if(readBuffer.typeCnt > 10) {
  2239  000894  0E0A               	movlw	10
  2240  000896  0101               	movlb	1	; () banked
  2241  000898  650A               	cpfsgt	(_readBuffer+10)& (0+255),b
  2242  00089A  D081               	goto	i1l69
  2243                           
  2244                           ; BSR set to: 1
  2245                           ;UART_Driver.c: 103: readBuffer.typeCnt = 0;
  2246  00089C  0E00               	movlw	0
  2247  00089E  0101               	movlb	1	; () banked
  2248  0008A0  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  2249                           
  2250                           ; BSR set to: 1
  2251                           ;UART_Driver.c: 104: }
  2252                           ;UART_Driver.c: 105: }
  2253                           ;UART_Driver.c: 106: break;
  2254                           
  2255                           ; BSR set to: 1
  2256  0008A2  D07D               	goto	i1l69
  2257  0008A4                     i1l1318:
  2258                           
  2259                           ; BSR set to: 1
  2260                           ;UART_Driver.c: 109: if (data == 0x3A) {
  2261  0008A4  0E3A               	movlw	58
  2262  0008A6  1818               	xorwf	fillDataBuffer@data,w,c
  2263  0008A8  A4D8               	btfss	status,2,c
  2264  0008AA  D002               	goto	i1l1322
  2265                           
  2266                           ; BSR set to: 1
  2267                           ;UART_Driver.c: 110: readBuffer.state = 0x03;
  2268  0008AC  0E03               	movlw	3
  2269  0008AE  D054               	goto	L5
  2270  0008B0                     i1l1322:
  2271                           
  2272                           ; BSR set to: 1
  2273                           ;UART_Driver.c: 112: readBuffer.sender[readBuffer.senderCnt] = data;
  2274  0008B0  0101               	movlb	1	; () banked
  2275  0008B2  513D               	movf	(_readBuffer+61)& (0+255),w,b
  2276  0008B4  0D01               	mullw	1
  2277  0008B6  0E0B               	movlw	low (_readBuffer+11)
  2278  0008B8  24F3               	addwf	prodl,w,c
  2279  0008BA  6ED9               	movwf	fsr2l,c
  2280  0008BC  0E01               	movlw	high (_readBuffer+11)
  2281  0008BE  20F4               	addwfc	prodh,w,c
  2282  0008C0  6EDA               	movwf	fsr2h,c
  2283  0008C2  C018  FFDF         	movff	fillDataBuffer@data,indf2
  2284                           
  2285                           ; BSR set to: 1
  2286                           ;UART_Driver.c: 113: readBuffer.senderCnt++;
  2287  0008C6  0101               	movlb	1	; () banked
  2288  0008C8  2B3D               	incf	(_readBuffer+61)& (0+255),f,b
  2289                           
  2290                           ; BSR set to: 1
  2291                           ;UART_Driver.c: 114: if(readBuffer.senderCnt > 50) {
  2292  0008CA  0E32               	movlw	50
  2293  0008CC  0101               	movlb	1	; () banked
  2294  0008CE  653D               	cpfsgt	(_readBuffer+61)& (0+255),b
  2295  0008D0  D066               	goto	i1l69
  2296                           
  2297                           ; BSR set to: 1
  2298                           ;UART_Driver.c: 115: readBuffer.senderCnt = 0;
  2299  0008D2  0E00               	movlw	0
  2300  0008D4  0101               	movlb	1	; () banked
  2301  0008D6  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  2302                           
  2303                           ; BSR set to: 1
  2304                           ;UART_Driver.c: 116: }
  2305                           ;UART_Driver.c: 117: }
  2306                           ;UART_Driver.c: 118: break;
  2307                           
  2308                           ; BSR set to: 1
  2309  0008D8  D062               	goto	i1l69
  2310  0008DA                     i1l1330:
  2311                           
  2312                           ; BSR set to: 1
  2313                           ;UART_Driver.c: 121: if (data == 0x3A) {
  2314  0008DA  0E3A               	movlw	58
  2315  0008DC  1818               	xorwf	fillDataBuffer@data,w,c
  2316  0008DE  A4D8               	btfss	status,2,c
  2317  0008E0  D002               	goto	i1l1334
  2318                           
  2319                           ; BSR set to: 1
  2320                           ;UART_Driver.c: 122: readBuffer.state = 0x04;
  2321  0008E2  0E04               	movlw	4
  2322  0008E4  D039               	goto	L5
  2323  0008E6                     i1l1334:
  2324                           
  2325                           ; BSR set to: 1
  2326                           ;UART_Driver.c: 124: readBuffer.command[readBuffer.commandCnt] = data;
  2327  0008E6  0101               	movlb	1	; () banked
  2328  0008E8  5170               	movf	(_readBuffer+112)& (0+255),w,b
  2329  0008EA  0D01               	mullw	1
  2330  0008EC  0E3E               	movlw	low (_readBuffer+62)
  2331  0008EE  24F3               	addwf	prodl,w,c
  2332  0008F0  6ED9               	movwf	fsr2l,c
  2333  0008F2  0E01               	movlw	high (_readBuffer+62)
  2334  0008F4  20F4               	addwfc	prodh,w,c
  2335  0008F6  6EDA               	movwf	fsr2h,c
  2336  0008F8  C018  FFDF         	movff	fillDataBuffer@data,indf2
  2337                           
  2338                           ; BSR set to: 1
  2339                           ;UART_Driver.c: 125: readBuffer.commandCnt++;
  2340  0008FC  0101               	movlb	1	; () banked
  2341  0008FE  2B70               	incf	(_readBuffer+112)& (0+255),f,b
  2342                           
  2343                           ; BSR set to: 1
  2344                           ;UART_Driver.c: 126: if(readBuffer.commandCnt > 50) {
  2345  000900  0E32               	movlw	50
  2346  000902  0101               	movlb	1	; () banked
  2347  000904  6570               	cpfsgt	(_readBuffer+112)& (0+255),b
  2348  000906  D04B               	goto	i1l69
  2349                           
  2350                           ; BSR set to: 1
  2351                           ;UART_Driver.c: 127: readBuffer.commandCnt = 0;
  2352  000908  0E00               	movlw	0
  2353  00090A  0101               	movlb	1	; () banked
  2354  00090C  6F70               	movwf	(_readBuffer+112)& (0+255),b
  2355                           
  2356                           ; BSR set to: 1
  2357                           ;UART_Driver.c: 128: }
  2358                           ;UART_Driver.c: 129: }
  2359                           ;UART_Driver.c: 130: break;
  2360                           
  2361                           ; BSR set to: 1
  2362  00090E  D047               	goto	i1l69
  2363  000910                     i1l1342:
  2364                           
  2365                           ; BSR set to: 1
  2366                           ;UART_Driver.c: 133: if (data == 0x3A) {
  2367  000910  0E3A               	movlw	58
  2368  000912  1818               	xorwf	fillDataBuffer@data,w,c
  2369  000914  A4D8               	btfss	status,2,c
  2370  000916  D002               	goto	i1l1346
  2371                           
  2372                           ; BSR set to: 1
  2373                           ;UART_Driver.c: 134: readBuffer.state = 0x05;
  2374  000918  0E05               	movlw	5
  2375  00091A  D01E               	goto	L5
  2376  00091C                     i1l1346:
  2377                           
  2378                           ; BSR set to: 1
  2379                           ;UART_Driver.c: 136: readBuffer.message[readBuffer.messageCnt] = data;
  2380  00091C  0101               	movlb	1	; () banked
  2381  00091E  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  2382  000920  0D01               	mullw	1
  2383  000922  0E71               	movlw	low (_readBuffer+113)
  2384  000924  24F3               	addwf	prodl,w,c
  2385  000926  6ED9               	movwf	fsr2l,c
  2386  000928  0E01               	movlw	high (_readBuffer+113)
  2387  00092A  20F4               	addwfc	prodh,w,c
  2388  00092C  6EDA               	movwf	fsr2h,c
  2389  00092E  C018  FFDF         	movff	fillDataBuffer@data,indf2
  2390                           
  2391                           ; BSR set to: 1
  2392                           ;UART_Driver.c: 137: readBuffer.messageCnt++;
  2393  000932  0101               	movlb	1	; () banked
  2394  000934  2BA3               	incf	(_readBuffer+163)& (0+255),f,b
  2395                           
  2396                           ; BSR set to: 1
  2397                           ;UART_Driver.c: 138: if(readBuffer.messageCnt > 50) {
  2398  000936  0E32               	movlw	50
  2399  000938  0101               	movlb	1	; () banked
  2400  00093A  65A3               	cpfsgt	(_readBuffer+163)& (0+255),b
  2401  00093C  D030               	goto	i1l69
  2402                           
  2403                           ; BSR set to: 1
  2404                           ;UART_Driver.c: 139: readBuffer.messageCnt = 0;
  2405  00093E  0E00               	movlw	0
  2406  000940  0101               	movlb	1	; () banked
  2407  000942  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  2408                           
  2409                           ; BSR set to: 1
  2410                           ;UART_Driver.c: 140: }
  2411                           ;UART_Driver.c: 141: }
  2412                           ;UART_Driver.c: 142: break;
  2413                           
  2414                           ; BSR set to: 1
  2415  000944  D02C               	goto	i1l69
  2416  000946                     i1l1354:
  2417                           
  2418                           ; BSR set to: 1
  2419                           ;UART_Driver.c: 145: if (data == 0x24) {
  2420  000946  0E24               	movlw	36
  2421  000948  1818               	xorwf	fillDataBuffer@data,w,c
  2422  00094A  A4D8               	btfss	status,2,c
  2423  00094C  D008               	goto	i1l1362
  2424                           
  2425                           ; BSR set to: 1
  2426                           ;UART_Driver.c: 146: acknowledge();
  2427  00094E  EC5E  F007         	call	_acknowledge	;wreg free
  2428                           
  2429                           ;UART_Driver.c: 147: readReady = 1;
  2430  000952  0E01               	movlw	1
  2431  000954  6E35               	movwf	_readReady,c
  2432                           
  2433                           ;UART_Driver.c: 148: readBuffer.state = 0x00;
  2434  000956  0E00               	movlw	0
  2435  000958                     L5:
  2436  000958  0101               	movlb	1	; () banked
  2437  00095A  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2438                           
  2439                           ;UART_Driver.c: 149: } else {
  2440  00095C  D020               	goto	i1l69
  2441  00095E                     i1l1362:
  2442                           
  2443                           ; BSR set to: 1
  2444                           ;UART_Driver.c: 151: readBuffer.readId = (data - 0x30);
  2445  00095E  5018               	movf	fillDataBuffer@data,w,c
  2446  000960  0FD0               	addlw	208
  2447  000962  0101               	movlb	1	; () banked
  2448  000964  6FA4               	movwf	(_readBuffer+164)& (0+255),b
  2449                           
  2450                           ; BSR set to: 1
  2451                           ;UART_Driver.c: 152: }
  2452                           ;UART_Driver.c: 153: break;
  2453  000966  D01B               	goto	i1l69
  2454  000968                     i1l1364:
  2455                           
  2456                           ; BSR set to: 1
  2457                           ;UART_Driver.c: 156: readBuffer.state = 0x00;
  2458  000968  0E00               	movlw	0
  2459  00096A  0101               	movlb	1	; () banked
  2460  00096C  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2461                           
  2462                           ;UART_Driver.c: 157: readReady = 0;
  2463  00096E  0E00               	movlw	0
  2464  000970  6E35               	movwf	_readReady,c
  2465                           
  2466                           ; BSR set to: 1
  2467                           ;UART_Driver.c: 159: }
  2468                           
  2469                           ;UART_Driver.c: 158: break;
  2470  000972  D015               	goto	i1l69
  2471  000974                     i1l1368:
  2472  000974  0101               	movlb	1	; () banked
  2473  000976  51A5               	movf	(_readBuffer+165)& (0+255),w,b
  2474                           
  2475                           ; Switch size 1, requested type "space"
  2476                           ; Number of cases is 6, Range of values is 0 to 5
  2477                           ; switch strategies available:
  2478                           ; Name         Instructions Cycles
  2479                           ; simple_byte           19    10 (average)
  2480                           ;	Chosen strategy is simple_byte
  2481  000978  0A00               	xorlw	0	; case 0
  2482  00097A  B4D8               	btfsc	status,2,c
  2483  00097C  D760               	goto	i1l1298
  2484  00097E  0A01               	xorlw	1	; case 1
  2485  000980  B4D8               	btfsc	status,2,c
  2486  000982  D775               	goto	i1l1306
  2487  000984  0A03               	xorlw	3	; case 2
  2488  000986  B4D8               	btfsc	status,2,c
  2489  000988  D78D               	goto	i1l1318
  2490  00098A  0A01               	xorlw	1	; case 3
  2491  00098C  B4D8               	btfsc	status,2,c
  2492  00098E  D7A5               	goto	i1l1330
  2493  000990  0A07               	xorlw	7	; case 4
  2494  000992  B4D8               	btfsc	status,2,c
  2495  000994  D7BD               	goto	i1l1342
  2496  000996  0A01               	xorlw	1	; case 5
  2497  000998  B4D8               	btfsc	status,2,c
  2498  00099A  D7D5               	goto	i1l1354
  2499  00099C  D7E5               	goto	i1l1364
  2500  00099E                     i1l69:
  2501                           
  2502                           ; BSR set to: 1
  2503                           ;UART_Driver.c: 160: PORTAbits.RA0 = readReady;
  2504  00099E  B035               	btfsc	_readReady,0,c
  2505  0009A0  D002               	bra	i1u78_25
  2506  0009A2  9080               	bcf	3968,0,c	;volatile
  2507  0009A4  D001               	bra	i1u78_26
  2508  0009A6                     i1u78_25:
  2509  0009A6  8080               	bsf	3968,0,c	;volatile
  2510  0009A8                     i1u78_26:
  2511  0009A8  0012               	return		;funcret
  2512  0009AA                     __end_of_fillDataBuffer:
  2513                           	opt stack 0
  2514                           pclatu	equ	0xFFB
  2515                           pclath	equ	0xFFA
  2516                           tblptru	equ	0xFF8
  2517                           tblptrh	equ	0xFF7
  2518                           tblptrl	equ	0xFF6
  2519                           tablat	equ	0xFF5
  2520                           prodh	equ	0xFF4
  2521                           prodl	equ	0xFF3
  2522                           intcon	equ	0xFF2
  2523                           postinc0	equ	0xFEE
  2524                           fsr0h	equ	0xFEA
  2525                           fsr0l	equ	0xFE9
  2526                           wreg	equ	0xFE8
  2527                           postdec1	equ	0xFE5
  2528                           fsr1h	equ	0xFE2
  2529                           fsr1l	equ	0xFE1
  2530                           bsr	equ	0xFE0
  2531                           indf2	equ	0xFDF
  2532                           postinc2	equ	0xFDE
  2533                           postdec2	equ	0xFDD
  2534                           fsr2h	equ	0xFDA
  2535                           fsr2l	equ	0xFD9
  2536                           status	equ	0xFD8
  2537                           
  2538 ;; *************** function _acknowledge *****************
  2539 ;; Defined at:
  2540 ;;		line 163 in file "Drivers/UART_Driver.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;		None
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;		None
  2545 ;; Return value:  Size  Location     Type
  2546 ;;                  1    wreg      void 
  2547 ;; Registers used:
  2548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2549 ;; Tracked objects:
  2550 ;;		On entry : 0/0
  2551 ;;		On exit  : 0/0
  2552 ;;		Unchanged: 0/0
  2553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2554 ;;      Params:         0       0       0       0       0       0       0       0       0
  2555 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2556 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2557 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2558 ;;Total ram usage:        0 bytes
  2559 ;; Hardware stack levels used:    1
  2560 ;; Hardware stack levels required when called:    3
  2561 ;; This function calls:
  2562 ;;		i1_printf
  2563 ;; This function is called by:
  2564 ;;		_fillDataBuffer
  2565 ;; This function uses a non-reentrant model
  2566 ;;
  2567                           
  2568                           	psect	text13
  2569  000EBC                     __ptext13:
  2570                           	opt stack 0
  2571  000EBC                     _acknowledge:
  2572                           	opt stack 21
  2573                           
  2574                           ;UART_Driver.c: 164: printf(startCharacter);
  2575                           
  2576                           ;incstack = 0
  2577  000EBC  C030  F008         	movff	_startCharacter,i1printf@f
  2578  000EC0  C031  F009         	movff	_startCharacter+1,i1printf@f+1
  2579  000EC4  5008               	movf	i1printf@f,w,c
  2580  000EC6  1009               	iorwf	i1printf@f+1,w,c
  2581  000EC8  A4D8               	btfss	status,2,c
  2582  000ECA  0E00               	movlw	low (__mediumconst shr (0+16))
  2583  000ECC  6E0A               	movwf	i1printf@f+2,c
  2584  000ECE  EC81  F005         	call	i1_printf	;wreg free
  2585                           
  2586                           ;UART_Driver.c: 166: printf(ackCharacter);
  2587  000ED2  C02E  F008         	movff	_ackCharacter,i1printf@f
  2588  000ED6  C02F  F009         	movff	_ackCharacter+1,i1printf@f+1
  2589  000EDA  5008               	movf	i1printf@f,w,c
  2590  000EDC  1009               	iorwf	i1printf@f+1,w,c
  2591  000EDE  A4D8               	btfss	status,2,c
  2592  000EE0  0E00               	movlw	low (__mediumconst shr (0+16))
  2593  000EE2  6E0A               	movwf	i1printf@f+2,c
  2594  000EE4  EC81  F005         	call	i1_printf	;wreg free
  2595                           
  2596                           ;UART_Driver.c: 168: printf("%x",readBuffer.readId);
  2597  000EE8  0E2D               	movlw	low STR_5
  2598  000EEA  6E08               	movwf	i1printf@f,c
  2599  000EEC  0E08               	movlw	high STR_5
  2600  000EEE  6E09               	movwf	i1printf@f+1,c
  2601  000EF0  5008               	movf	i1printf@f,w,c
  2602  000EF2  1009               	iorwf	i1printf@f+1,w,c
  2603  000EF4  A4D8               	btfss	status,2,c
  2604  000EF6  0E00               	movlw	low (__mediumconst shr (0+16))
  2605  000EF8  6E0A               	movwf	i1printf@f+2,c
  2606  000EFA  C1A4  F00B         	movff	_readBuffer+164,?i1_printf+3
  2607  000EFE  6A0C               	clrf	?i1_printf+4,c
  2608  000F00  EC81  F005         	call	i1_printf	;wreg free
  2609                           
  2610                           ;UART_Driver.c: 170: printf(stopCharacter);
  2611  000F04  C032  F008         	movff	_stopCharacter,i1printf@f
  2612  000F08  C033  F009         	movff	_stopCharacter+1,i1printf@f+1
  2613  000F0C  5008               	movf	i1printf@f,w,c
  2614  000F0E  1009               	iorwf	i1printf@f+1,w,c
  2615  000F10  A4D8               	btfss	status,2,c
  2616  000F12  0E00               	movlw	low (__mediumconst shr (0+16))
  2617  000F14  6E0A               	movwf	i1printf@f+2,c
  2618  000F16  EC81  F005         	call	i1_printf	;wreg free
  2619  000F1A  0012               	return		;funcret
  2620  000F1C                     __end_of_acknowledge:
  2621                           	opt stack 0
  2622                           pclatu	equ	0xFFB
  2623                           pclath	equ	0xFFA
  2624                           tblptru	equ	0xFF8
  2625                           tblptrh	equ	0xFF7
  2626                           tblptrl	equ	0xFF6
  2627                           tablat	equ	0xFF5
  2628                           prodh	equ	0xFF4
  2629                           prodl	equ	0xFF3
  2630                           intcon	equ	0xFF2
  2631                           postinc0	equ	0xFEE
  2632                           fsr0h	equ	0xFEA
  2633                           fsr0l	equ	0xFE9
  2634                           wreg	equ	0xFE8
  2635                           postdec1	equ	0xFE5
  2636                           fsr1h	equ	0xFE2
  2637                           fsr1l	equ	0xFE1
  2638                           bsr	equ	0xFE0
  2639                           indf2	equ	0xFDF
  2640                           postinc2	equ	0xFDE
  2641                           postdec2	equ	0xFDD
  2642                           fsr2h	equ	0xFDA
  2643                           fsr2l	equ	0xFD9
  2644                           status	equ	0xFD8
  2645                           
  2646 ;; *************** function i1_printf *****************
  2647 ;; Defined at:
  2648 ;;		line 464 in file "/opt/microchip/xc8/v1.37/sources/common/doprnt.c"
  2649 ;; Parameters:    Size  Location     Type
  2650 ;;  f               3    7[COMRAM] PTR const unsigned char 
  2651 ;;		 -> STR_10(5), STR_9(2), STR_8(6), STR_7(2), 
  2652 ;;		 -> STR_6(2), STR_5(3), STR_4(4), STR_3(4), 
  2653 ;;		 -> ROM(32767), STR_2(2), STR_1(2), 
  2654 ;; Auto vars:     Size  Location     Type
  2655 ;;  printf          4    0        struct .
  2656 ;;  printf          3    0        PTR const unsigned char 
  2657 ;;  printf          2   19[COMRAM] unsigned int 
  2658 ;;  printf          2   16[COMRAM] PTR void [1]
  2659 ;;		 -> ?i1_printf(2), ?_printf(2), 
  2660 ;;  printf          2    0        unsigned int 
  2661 ;;  printf          1   22[COMRAM] char 
  2662 ;;  printf          1   21[COMRAM] char 
  2663 ;;  printf          1   18[COMRAM] unsigned char 
  2664 ;;  printf          1   15[COMRAM] unsigned char 
  2665 ;; Return value:  Size  Location     Type
  2666 ;;                  2    7[COMRAM] int 
  2667 ;; Registers used:
  2668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2669 ;; Tracked objects:
  2670 ;;		On entry : 0/0
  2671 ;;		On exit  : 0/0
  2672 ;;		Unchanged: 0/0
  2673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2674 ;;      Params:         5       0       0       0       0       0       0       0       0
  2675 ;;      Locals:         8       0       0       0       0       0       0       0       0
  2676 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2677 ;;      Totals:        16       0       0       0       0       0       0       0       0
  2678 ;;Total ram usage:       16 bytes
  2679 ;; Hardware stack levels used:    1
  2680 ;; Hardware stack levels required when called:    2
  2681 ;; This function calls:
  2682 ;;		i1___lwdiv
  2683 ;;		i1_putch
  2684 ;; This function is called by:
  2685 ;;		_acknowledge
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689                           	psect	text14
  2690  000B02                     __ptext14:
  2691                           	opt stack 0
  2692  000B02                     i1_printf:
  2693                           	opt stack 21
  2694                           
  2695                           ;doprnt.c: 466: va_list ap;
  2696                           ;doprnt.c: 499: signed char c;
  2697                           ;doprnt.c: 506: signed char prec;
  2698                           ;doprnt.c: 508: unsigned char flag;
  2699                           ;doprnt.c: 523: union {
  2700                           ;doprnt.c: 524: unsigned long vd;
  2701                           ;doprnt.c: 525: double integ;
  2702                           ;doprnt.c: 526: } tmpval;
  2703                           ;doprnt.c: 528: unsigned int val;
  2704                           ;doprnt.c: 529: unsigned len;
  2705                           ;doprnt.c: 530: const char * cp;
  2706                           ;doprnt.c: 533: *ap = __va_start();
  2707                           
  2708                           ;incstack = 0
  2709  000B02  0E0B               	movlw	low (?i1_printf+3)
  2710  000B04  6E11               	movwf	i1printf@ap,c
  2711  000B06  0E00               	movlw	high (?i1_printf+3)
  2712  000B08  6E12               	movwf	i1printf@ap+1,c
  2713                           
  2714                           ;doprnt.c: 536: while(c = *f++) {
  2715  000B0A  D079               	goto	i1l1202
  2716  000B0C                     i1l1164:
  2717                           
  2718                           ;doprnt.c: 538: if(c != '%')
  2719  000B0C  0E25               	movlw	37
  2720  000B0E  1817               	xorwf	i1printf@c,w,c
  2721  000B10  B4D8               	btfsc	status,2,c
  2722  000B12  D004               	goto	i1l1168
  2723                           
  2724                           ;doprnt.c: 540: {
  2725                           ;doprnt.c: 541: (putch(c) );
  2726  000B14  5017               	movf	i1printf@c,w,c
  2727  000B16  EC65  F008         	call	i1_putch
  2728                           
  2729                           ;doprnt.c: 542: continue;
  2730  000B1A  D071               	goto	i1l1202
  2731  000B1C                     i1l1168:
  2732                           
  2733                           ;doprnt.c: 543: }
  2734                           ;doprnt.c: 548: flag = 0;
  2735  000B1C  0E00               	movlw	0
  2736  000B1E  6E10               	movwf	i1printf@flag,c
  2737                           
  2738                           ;doprnt.c: 635: switch(c = *f++) {
  2739  000B20  D004               	goto	i1l1174
  2740  000B22                     i1l1170:
  2741                           
  2742                           ;doprnt.c: 809: (putch(c) );
  2743  000B22  5017               	movf	i1printf@c,w,c
  2744  000B24  EC65  F008         	call	i1_putch
  2745                           
  2746                           ;doprnt.c: 810: continue;
  2747  000B28  D06A               	goto	i1l1202
  2748  000B2A                     i1l1174:
  2749  000B2A  C008  F00D         	movff	i1printf@f,??i1_printf
  2750  000B2E  C009  F00E         	movff	i1printf@f+1,??i1_printf+1
  2751  000B32  C00A  F00F         	movff	i1printf@f+2,??i1_printf+2
  2752  000B36  2A08               	incf	i1printf@f,f,c
  2753  000B38  0E00               	movlw	0
  2754  000B3A  2209               	addwfc	i1printf@f+1,f,c
  2755  000B3C  220A               	addwfc	i1printf@f+2,f,c
  2756  000B3E  C00D  FFF6         	movff	??i1_printf,tblptrl
  2757  000B42  C00E  FFF7         	movff	??i1_printf+1,tblptrh
  2758  000B46  C00F  FFF8         	movff	??i1_printf+2,tblptru
  2759  000B4A  0008               	tblrd		*
  2760  000B4C  CFF5 F017          	movff	tablat,i1printf@c
  2761  000B50  5017               	movf	i1printf@c,w,c
  2762                           
  2763                           ; Switch size 1, requested type "space"
  2764                           ; Number of cases is 2, Range of values is 0 to 120
  2765                           ; switch strategies available:
  2766                           ; Name         Instructions Cycles
  2767                           ; simple_byte            7     4 (average)
  2768                           ;	Chosen strategy is simple_byte
  2769  000B52  0A00               	xorlw	0	; case 0
  2770  000B54  B4D8               	btfsc	status,2,c
  2771  000B56  0012               	return	
  2772  000B58  0A78               	xorlw	120	; case 120
  2773  000B5A  A4D8               	btfss	status,2,c
  2774  000B5C  D7E2               	goto	i1l1170
  2775                           
  2776                           ;doprnt.c: 1273: {
  2777                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2778  000B5E  C011  FFD9         	movff	i1printf@ap,fsr2l
  2779  000B62  C012  FFDA         	movff	i1printf@ap+1,fsr2h
  2780  000B66  CFDE F014          	movff	postinc2,i1printf@val
  2781  000B6A  CFDD F015          	movff	postdec2,i1printf@val+1
  2782  000B6E  0E02               	movlw	2
  2783  000B70  2611               	addwf	i1printf@ap,f,c
  2784  000B72  0E00               	movlw	0
  2785  000B74  2212               	addwfc	i1printf@ap+1,f,c
  2786                           
  2787                           ;doprnt.c: 1287: }
  2788                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2789  000B76  0E01               	movlw	1
  2790  000B78  6E17               	movwf	i1printf@c,c
  2791  000B7A                     i1l1182:
  2792  000B7A  0E04               	movlw	4
  2793  000B7C  1817               	xorwf	i1printf@c,w,c
  2794  000B7E  B4D8               	btfsc	status,2,c
  2795  000B80  D012               	goto	i1l166
  2796                           
  2797                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2798  000B82  5017               	movf	i1printf@c,w,c
  2799  000B84  0D02               	mullw	2
  2800  000B86  0E01               	movlw	low _hexpowers
  2801  000B88  24F3               	addwf	prodl,w,c
  2802  000B8A  6EF6               	movwf	tblptrl,c
  2803  000B8C  0E08               	movlw	high _hexpowers
  2804  000B8E  20F4               	addwfc	prodh,w,c
  2805  000B90  6EF7               	movwf	tblptrh,c
  2806  000B92                     	if	0	;There are less than 3 active tblptr bytes
  2807  000B92                     	endif
  2808  000B92  0009               	tblrd		*+
  2809  000B94  50F5               	movf	tablat,w,c
  2810  000B96  5C14               	subwf	i1printf@val,w,c
  2811  000B98  0009               	tblrd		*+
  2812  000B9A  50F5               	movf	tablat,w,c
  2813  000B9C  5815               	subwfb	i1printf@val+1,w,c
  2814  000B9E  A0D8               	btfss	status,0,c
  2815  000BA0  D002               	goto	i1l166
  2816                           
  2817                           ;doprnt.c: 1318: break;
  2818  000BA2  2A17               	incf	i1printf@c,f,c
  2819  000BA4  D7EA               	goto	i1l1182
  2820  000BA6                     i1l166:
  2821                           
  2822                           ;doprnt.c: 1422: {
  2823                           ;doprnt.c: 1469: }
  2824                           ;doprnt.c: 1472: prec = c;
  2825  000BA6  C017  F016         	movff	i1printf@c,i1printf@prec
  2826                           
  2827                           ;doprnt.c: 1474: while(prec--) {
  2828  000BAA  D025               	goto	i1l1200
  2829  000BAC                     i1l1194:
  2830                           
  2831                           ;doprnt.c: 1478: {
  2832                           ;doprnt.c: 1499: {
  2833                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2834  000BAC  C014  F001         	movff	i1printf@val,i1___lwdiv@dividend
  2835  000BB0  C015  F002         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  2836  000BB4  5016               	movf	i1printf@prec,w,c
  2837  000BB6  0D02               	mullw	2
  2838  000BB8  0E01               	movlw	low _hexpowers
  2839  000BBA  24F3               	addwf	prodl,w,c
  2840  000BBC  6EF6               	movwf	tblptrl,c
  2841  000BBE  0E08               	movlw	high _hexpowers
  2842  000BC0  20F4               	addwfc	prodh,w,c
  2843  000BC2  6EF7               	movwf	tblptrh,c
  2844  000BC4                     	if	0	;There are less than 3 active tblptr bytes
  2845  000BC4                     	endif
  2846  000BC4  0009               	tblrd		*+
  2847  000BC6  CFF5 F003          	movff	tablat,i1___lwdiv@divisor
  2848  000BCA  000A               	tblrd		*-
  2849  000BCC  CFF5 F004          	movff	tablat,i1___lwdiv@divisor+1
  2850  000BD0  ECE8  F007         	call	i1___lwdiv	;wreg free
  2851  000BD4  5001               	movf	?i1___lwdiv,w,c
  2852  000BD6  0B0F               	andlw	15
  2853  000BD8  6E13               	movwf	i1printf@idx,c
  2854                           
  2855                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2856  000BDA  5013               	movf	i1printf@idx,w,c
  2857  000BDC  0D01               	mullw	1
  2858  000BDE  0E09               	movlw	low STR_11
  2859  000BE0  24F3               	addwf	prodl,w,c
  2860  000BE2  6EF6               	movwf	tblptrl,c
  2861  000BE4  0E08               	movlw	high STR_11
  2862  000BE6  20F4               	addwfc	prodh,w,c
  2863  000BE8  6EF7               	movwf	tblptrh,c
  2864  000BEA                     	if	0	;There are less than 3 active tblptr bytes
  2865  000BEA                     	endif
  2866  000BEA  0008               	tblrd		*
  2867  000BEC  CFF5 F017          	movff	tablat,i1printf@c
  2868                           
  2869                           ;doprnt.c: 1508: }
  2870                           ;doprnt.c: 1523: }
  2871                           ;doprnt.c: 1524: (putch(c) );
  2872  000BF0  5017               	movf	i1printf@c,w,c
  2873  000BF2  EC65  F008         	call	i1_putch
  2874  000BF6                     i1l1200:
  2875  000BF6  0616               	decf	i1printf@prec,f,c
  2876  000BF8  2816               	incf	i1printf@prec,w,c
  2877  000BFA  A4D8               	btfss	status,2,c
  2878  000BFC  D7D7               	goto	i1l1194
  2879  000BFE                     i1l1202:
  2880  000BFE  C008  F00D         	movff	i1printf@f,??i1_printf
  2881  000C02  C009  F00E         	movff	i1printf@f+1,??i1_printf+1
  2882  000C06  C00A  F00F         	movff	i1printf@f+2,??i1_printf+2
  2883  000C0A  2A08               	incf	i1printf@f,f,c
  2884  000C0C  0E00               	movlw	0
  2885  000C0E  2209               	addwfc	i1printf@f+1,f,c
  2886  000C10  220A               	addwfc	i1printf@f+2,f,c
  2887  000C12  C00D  FFF6         	movff	??i1_printf,tblptrl
  2888  000C16  C00E  FFF7         	movff	??i1_printf+1,tblptrh
  2889  000C1A  C00F  FFF8         	movff	??i1_printf+2,tblptru
  2890  000C1E  0008               	tblrd		*
  2891  000C20  CFF5 F017          	movff	tablat,i1printf@c
  2892  000C24  5017               	movf	i1printf@c,w,c
  2893  000C26  B4D8               	btfsc	status,2,c
  2894  000C28  0012               	return	
  2895  000C2A  D770               	goto	i1l1164
  2896  000C2C                     __end_ofi1_printf:
  2897                           	opt stack 0
  2898                           pclatu	equ	0xFFB
  2899                           pclath	equ	0xFFA
  2900                           tblptru	equ	0xFF8
  2901                           tblptrh	equ	0xFF7
  2902                           tblptrl	equ	0xFF6
  2903                           tablat	equ	0xFF5
  2904                           prodh	equ	0xFF4
  2905                           prodl	equ	0xFF3
  2906                           intcon	equ	0xFF2
  2907                           postinc0	equ	0xFEE
  2908                           fsr0h	equ	0xFEA
  2909                           fsr0l	equ	0xFE9
  2910                           wreg	equ	0xFE8
  2911                           postdec1	equ	0xFE5
  2912                           fsr1h	equ	0xFE2
  2913                           fsr1l	equ	0xFE1
  2914                           bsr	equ	0xFE0
  2915                           indf2	equ	0xFDF
  2916                           postinc2	equ	0xFDE
  2917                           postdec2	equ	0xFDD
  2918                           fsr2h	equ	0xFDA
  2919                           fsr2l	equ	0xFD9
  2920                           status	equ	0xFD8
  2921                           
  2922 ;; *************** function i1_putch *****************
  2923 ;; Defined at:
  2924 ;;		line 250 in file "Drivers/UART_Driver.c"
  2925 ;; Parameters:    Size  Location     Type
  2926 ;;  data            1    wreg     unsigned char 
  2927 ;; Auto vars:     Size  Location     Type
  2928 ;;  data            1    1[COMRAM] unsigned char 
  2929 ;; Return value:  Size  Location     Type
  2930 ;;                  1    wreg      void 
  2931 ;; Registers used:
  2932 ;;		wreg, status,2, cstack
  2933 ;; Tracked objects:
  2934 ;;		On entry : 0/0
  2935 ;;		On exit  : 0/0
  2936 ;;		Unchanged: 0/0
  2937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2938 ;;      Params:         0       0       0       0       0       0       0       0       0
  2939 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2940 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2941 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2942 ;;Total ram usage:        1 bytes
  2943 ;; Hardware stack levels used:    1
  2944 ;; Hardware stack levels required when called:    1
  2945 ;; This function calls:
  2946 ;;		i1_writeByte
  2947 ;; This function is called by:
  2948 ;;		i1_printf
  2949 ;; This function uses a non-reentrant model
  2950 ;;
  2951                           
  2952                           	psect	text15
  2953  0010CA                     __ptext15:
  2954                           	opt stack 0
  2955  0010CA                     i1_putch:
  2956                           	opt stack 21
  2957                           
  2958                           ;incstack = 0
  2959                           ;i1putch@data stored from wreg
  2960  0010CA  6E02               	movwf	i1putch@data,c
  2961                           
  2962                           ;UART_Driver.c: 251: writeByte(data);
  2963  0010CC  5002               	movf	i1putch@data,w,c
  2964  0010CE  EC5A  F008         	call	i1_writeByte
  2965  0010D2  0012               	return		;funcret
  2966  0010D4                     __end_ofi1_putch:
  2967                           	opt stack 0
  2968                           pclatu	equ	0xFFB
  2969                           pclath	equ	0xFFA
  2970                           tblptru	equ	0xFF8
  2971                           tblptrh	equ	0xFF7
  2972                           tblptrl	equ	0xFF6
  2973                           tablat	equ	0xFF5
  2974                           prodh	equ	0xFF4
  2975                           prodl	equ	0xFF3
  2976                           intcon	equ	0xFF2
  2977                           postinc0	equ	0xFEE
  2978                           fsr0h	equ	0xFEA
  2979                           fsr0l	equ	0xFE9
  2980                           wreg	equ	0xFE8
  2981                           postdec1	equ	0xFE5
  2982                           fsr1h	equ	0xFE2
  2983                           fsr1l	equ	0xFE1
  2984                           bsr	equ	0xFE0
  2985                           indf2	equ	0xFDF
  2986                           postinc2	equ	0xFDE
  2987                           postdec2	equ	0xFDD
  2988                           fsr2h	equ	0xFDA
  2989                           fsr2l	equ	0xFD9
  2990                           status	equ	0xFD8
  2991                           
  2992 ;; *************** function i1_writeByte *****************
  2993 ;; Defined at:
  2994 ;;		line 65 in file "Drivers/UART_Driver.c"
  2995 ;; Parameters:    Size  Location     Type
  2996 ;;  data            1    wreg     unsigned char 
  2997 ;; Auto vars:     Size  Location     Type
  2998 ;;  data            1    0[COMRAM] unsigned char 
  2999 ;; Return value:  Size  Location     Type
  3000 ;;                  1    wreg      void 
  3001 ;; Registers used:
  3002 ;;		wreg
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3008 ;;      Params:         0       0       0       0       0       0       0       0       0
  3009 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3010 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3011 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3012 ;;Total ram usage:        1 bytes
  3013 ;; Hardware stack levels used:    1
  3014 ;; This function calls:
  3015 ;;		Nothing
  3016 ;; This function is called by:
  3017 ;;		i1_putch
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           	psect	text16
  3022  0010B4                     __ptext16:
  3023                           	opt stack 0
  3024  0010B4                     i1_writeByte:
  3025                           	opt stack 21
  3026                           
  3027                           ;incstack = 0
  3028                           ;i1writeByte@data stored from wreg
  3029  0010B4  6E01               	movwf	i1writeByte@data,c
  3030  0010B6                     i1l53:
  3031  0010B6  A2AC               	btfss	4012,1,c	;volatile
  3032  0010B8  D7FE               	goto	i1l53
  3033                           
  3034                           ;UART_Driver.c: 67: TXREG = data;
  3035  0010BA  C001  FFAD         	movff	i1writeByte@data,4013	;volatile
  3036  0010BE  0012               	return		;funcret
  3037  0010C0                     __end_ofi1_writeByte:
  3038                           	opt stack 0
  3039                           pclatu	equ	0xFFB
  3040                           pclath	equ	0xFFA
  3041                           tblptru	equ	0xFF8
  3042                           tblptrh	equ	0xFF7
  3043                           tblptrl	equ	0xFF6
  3044                           tablat	equ	0xFF5
  3045                           prodh	equ	0xFF4
  3046                           prodl	equ	0xFF3
  3047                           intcon	equ	0xFF2
  3048                           postinc0	equ	0xFEE
  3049                           fsr0h	equ	0xFEA
  3050                           fsr0l	equ	0xFE9
  3051                           wreg	equ	0xFE8
  3052                           postdec1	equ	0xFE5
  3053                           fsr1h	equ	0xFE2
  3054                           fsr1l	equ	0xFE1
  3055                           bsr	equ	0xFE0
  3056                           indf2	equ	0xFDF
  3057                           postinc2	equ	0xFDE
  3058                           postdec2	equ	0xFDD
  3059                           fsr2h	equ	0xFDA
  3060                           fsr2l	equ	0xFD9
  3061                           status	equ	0xFD8
  3062                           
  3063 ;; *************** function i1___lwdiv *****************
  3064 ;; Defined at:
  3065 ;;		line 8 in file "/opt/microchip/xc8/v1.37/sources/common/lwdiv.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;  dividend        2    0[COMRAM] unsigned int 
  3068 ;;  divisor         2    2[COMRAM] unsigned int 
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  3071 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  3072 ;; Return value:  Size  Location     Type
  3073 ;;                  2    0[COMRAM] unsigned int 
  3074 ;; Registers used:
  3075 ;;		wreg, status,2, status,0
  3076 ;; Tracked objects:
  3077 ;;		On entry : 0/0
  3078 ;;		On exit  : 0/0
  3079 ;;		Unchanged: 0/0
  3080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3081 ;;      Params:         4       0       0       0       0       0       0       0       0
  3082 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3083 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3084 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3085 ;;Total ram usage:        7 bytes
  3086 ;; Hardware stack levels used:    1
  3087 ;; This function calls:
  3088 ;;		Nothing
  3089 ;; This function is called by:
  3090 ;;		i1_printf
  3091 ;; This function uses a non-reentrant model
  3092 ;;
  3093                           
  3094                           	psect	text17
  3095  000FD0                     __ptext17:
  3096                           	opt stack 0
  3097  000FD0                     i1___lwdiv:
  3098                           	opt stack 22
  3099                           
  3100                           ;incstack = 0
  3101  000FD0  0E00               	movlw	0
  3102  000FD2  6E06               	movwf	i1___lwdiv@quotient+1,c
  3103  000FD4  0E00               	movlw	0
  3104  000FD6  6E05               	movwf	i1___lwdiv@quotient,c
  3105  000FD8  5003               	movf	i1___lwdiv@divisor,w,c
  3106  000FDA  1004               	iorwf	i1___lwdiv@divisor+1,w,c
  3107  000FDC  B4D8               	btfsc	status,2,c
  3108  000FDE  D01C               	goto	i1l575
  3109  000FE0  0E01               	movlw	1
  3110  000FE2  6E07               	movwf	i1___lwdiv@counter,c
  3111  000FE4  D004               	goto	i1l1124
  3112  000FE6                     i1l1122:
  3113  000FE6  90D8               	bcf	status,0,c
  3114  000FE8  3603               	rlcf	i1___lwdiv@divisor,f,c
  3115  000FEA  3604               	rlcf	i1___lwdiv@divisor+1,f,c
  3116  000FEC  2A07               	incf	i1___lwdiv@counter,f,c
  3117  000FEE                     i1l1124:
  3118  000FEE  AE04               	btfss	i1___lwdiv@divisor+1,7,c
  3119  000FF0  D7FA               	goto	i1l1122
  3120  000FF2                     i1l1126:
  3121  000FF2  90D8               	bcf	status,0,c
  3122  000FF4  3605               	rlcf	i1___lwdiv@quotient,f,c
  3123  000FF6  3606               	rlcf	i1___lwdiv@quotient+1,f,c
  3124  000FF8  5003               	movf	i1___lwdiv@divisor,w,c
  3125  000FFA  5C01               	subwf	i1___lwdiv@dividend,w,c
  3126  000FFC  5004               	movf	i1___lwdiv@divisor+1,w,c
  3127  000FFE  5802               	subwfb	i1___lwdiv@dividend+1,w,c
  3128  001000  A0D8               	btfss	status,0,c
  3129  001002  D005               	goto	i1l1134
  3130  001004  5003               	movf	i1___lwdiv@divisor,w,c
  3131  001006  5E01               	subwf	i1___lwdiv@dividend,f,c
  3132  001008  5004               	movf	i1___lwdiv@divisor+1,w,c
  3133  00100A  5A02               	subwfb	i1___lwdiv@dividend+1,f,c
  3134  00100C  8005               	bsf	i1___lwdiv@quotient,0,c
  3135  00100E                     i1l1134:
  3136  00100E  90D8               	bcf	status,0,c
  3137  001010  3204               	rrcf	i1___lwdiv@divisor+1,f,c
  3138  001012  3203               	rrcf	i1___lwdiv@divisor,f,c
  3139  001014  2E07               	decfsz	i1___lwdiv@counter,f,c
  3140  001016  D7ED               	goto	i1l1126
  3141  001018                     i1l575:
  3142  001018  C005  F001         	movff	i1___lwdiv@quotient,?i1___lwdiv
  3143  00101C  C006  F002         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
  3144  001020  0012               	return		;funcret
  3145  001022                     __end_ofi1___lwdiv:
  3146                           	opt stack 0
  3147                           pclatu	equ	0xFFB
  3148                           pclath	equ	0xFFA
  3149                           tblptru	equ	0xFF8
  3150                           tblptrh	equ	0xFF7
  3151                           tblptrl	equ	0xFF6
  3152                           tablat	equ	0xFF5
  3153                           prodh	equ	0xFF4
  3154                           prodl	equ	0xFF3
  3155                           intcon	equ	0xFF2
  3156                           postinc0	equ	0xFEE
  3157                           fsr0h	equ	0xFEA
  3158                           fsr0l	equ	0xFE9
  3159                           wreg	equ	0xFE8
  3160                           postdec1	equ	0xFE5
  3161                           fsr1h	equ	0xFE2
  3162                           fsr1l	equ	0xFE1
  3163                           bsr	equ	0xFE0
  3164                           indf2	equ	0xFDF
  3165                           postinc2	equ	0xFDE
  3166                           postdec2	equ	0xFDD
  3167                           fsr2h	equ	0xFDA
  3168                           fsr2l	equ	0xFD9
  3169                           status	equ	0xFD8
  3170                           pclatu	equ	0xFFB
  3171                           pclath	equ	0xFFA
  3172                           tblptru	equ	0xFF8
  3173                           tblptrh	equ	0xFF7
  3174                           tblptrl	equ	0xFF6
  3175                           tablat	equ	0xFF5
  3176                           prodh	equ	0xFF4
  3177                           prodl	equ	0xFF3
  3178                           intcon	equ	0xFF2
  3179                           postinc0	equ	0xFEE
  3180                           fsr0h	equ	0xFEA
  3181                           fsr0l	equ	0xFE9
  3182                           wreg	equ	0xFE8
  3183                           postdec1	equ	0xFE5
  3184                           fsr1h	equ	0xFE2
  3185                           fsr1l	equ	0xFE1
  3186                           bsr	equ	0xFE0
  3187                           indf2	equ	0xFDF
  3188                           postinc2	equ	0xFDE
  3189                           postdec2	equ	0xFDD
  3190                           fsr2h	equ	0xFDA
  3191                           fsr2l	equ	0xFD9
  3192                           status	equ	0xFD8
  3193                           
  3194                           	psect	rparam
  3195  0000                     pclatu	equ	0xFFB
  3196                           pclath	equ	0xFFA
  3197                           tblptru	equ	0xFF8
  3198                           tblptrh	equ	0xFF7
  3199                           tblptrl	equ	0xFF6
  3200                           tablat	equ	0xFF5
  3201                           prodh	equ	0xFF4
  3202                           prodl	equ	0xFF3
  3203                           intcon	equ	0xFF2
  3204                           postinc0	equ	0xFEE
  3205                           fsr0h	equ	0xFEA
  3206                           fsr0l	equ	0xFE9
  3207                           wreg	equ	0xFE8
  3208                           postdec1	equ	0xFE5
  3209                           fsr1h	equ	0xFE2
  3210                           fsr1l	equ	0xFE1
  3211                           bsr	equ	0xFE0
  3212                           indf2	equ	0xFDF
  3213                           postinc2	equ	0xFDE
  3214                           postdec2	equ	0xFDD
  3215                           fsr2h	equ	0xFDA
  3216                           fsr2l	equ	0xFD9
  3217                           status	equ	0xFD8
  3218                           
  3219                           	psect	temp
  3220  000036                     btemp:
  3221                           	opt stack 0
  3222  000036                     	ds	1
  3223  0000                     int$flags	set	btemp
  3224                           pclatu	equ	0xFFB
  3225                           pclath	equ	0xFFA
  3226                           tblptru	equ	0xFF8
  3227                           tblptrh	equ	0xFF7
  3228                           tblptrl	equ	0xFF6
  3229                           tablat	equ	0xFF5
  3230                           prodh	equ	0xFF4
  3231                           prodl	equ	0xFF3
  3232                           intcon	equ	0xFF2
  3233                           postinc0	equ	0xFEE
  3234                           fsr0h	equ	0xFEA
  3235                           fsr0l	equ	0xFE9
  3236                           wreg	equ	0xFE8
  3237                           postdec1	equ	0xFE5
  3238                           fsr1h	equ	0xFE2
  3239                           fsr1l	equ	0xFE1
  3240                           bsr	equ	0xFE0
  3241                           indf2	equ	0xFDF
  3242                           postinc2	equ	0xFDE
  3243                           postdec2	equ	0xFDD
  3244                           fsr2h	equ	0xFDA
  3245                           fsr2l	equ	0xFD9
  3246                           status	equ	0xFD8


Data Sizes:
    Strings     47
    Constant    8
    Data        8
    BSS         168
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      53
    BANK0           160     23      28
    BANK1           256      0     166
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_10(CODE[5]), STR_9(CODE[2]), STR_8(CODE[6]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> ROM(CODE[32767]), STR_2(CODE[2]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_10(CODE[5]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_9(CODE[2]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_8(CODE[6]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_8(CODE[6]), ROM(CODE[32767]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 


Critical Paths under _main in COMRAM

    _printf->___lwdiv
    _putch->_writeByte
    _D_UART_Init->_D_UART_Enable

Critical Paths under _LowISR in COMRAM

    _LowISR->_fillDataBuffer
    _acknowledge->i1_printf
    i1_printf->i1___lwdiv
    i1_putch->i1_writeByte

Critical Paths under _main in BANK0

    _main->_D_UART_Init
    _D_UART_Write->_printf
    _printf->___lwdiv
    _D_UART_Init->___aldiv

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3141
                        _D_PORT_Init
                      _D_UART_Enable
                        _D_UART_Init
                       _D_UART_Write
 ---------------------------------------------------------------------------------
 (1) _D_UART_Write                                         5     1      4    1968
                                             17 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              23    20      3    1752
                                              3 BANK0     14    11      3
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      44
                                             42 COMRAM     1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (4) _writeByte                                            1     1      0      22
                                             41 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     395
                                             41 COMRAM     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _D_UART_Init                                          9     4      5    1142
                                             14 BANK0      9     4      5
                      _D_UART_Enable
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     753
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _D_UART_Enable                                        1     1      0      31
                                             41 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _LowISR                                              17    17      0     967
                                             24 COMRAM    17    17      0
                     _fillDataBuffer
                           _readByte
 ---------------------------------------------------------------------------------
 (6) _readByte                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _fillDataBuffer                                       1     1      0     967
                                             23 COMRAM     1     1      0
                        _acknowledge
 ---------------------------------------------------------------------------------
 (7) _acknowledge                                          0     0      0     725
                           i1_printf
 ---------------------------------------------------------------------------------
 (8) i1_printf                                            25    20      5     725
                                              7 COMRAM    16    11      5
                          i1___lwdiv
                            i1_putch
 ---------------------------------------------------------------------------------
 (9) i1_putch                                              1     1      0      44
                                              1 COMRAM     1     1      0
                        i1_writeByte
 ---------------------------------------------------------------------------------
 (10) i1_writeByte                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i1___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _D_PORT_Init
   _D_UART_Enable
   _D_UART_Init
     _D_UART_Enable
     ___aldiv
   _D_UART_Write
     _printf
       ___lwdiv
       _putch
         _writeByte

 _LowISR (ROOT)
   _fillDataBuffer
     _acknowledge
       i1_printf
         i1___lwdiv
         i1_putch
           i1_writeByte
   _readByte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A6       7       64.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     17      1C       5       17.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      35       1       56.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F7      20        0.0%
DATA                 0      0      F7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Oct 29 14:30:30 2016

                     l53 10AA              __CFG_BOR$ON 000000                       bsr 000FE0  
            __CFG_BORV$3 000000             _ackCharacter 002E             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l105 107E                      l142 1068                      l166 0A6C  
                    l575 0F70             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
                    u987 0E0E                      prod 000FF3                      wreg 000FE8  
           __CFG_FOSC$HS 000000      __end_ofi1_writeByte 10C0             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     l1422 0F36                     l1504 0C9C  
                   l1520 0D18                     l1424 0F40                     l1440 09B8  
                   l1506 0CAC                     l1434 0F64                     l1426 0F44  
                   l1450 09DE                     l1524 0D34                     l1516 0D06  
                   l1508 0CB2                     l1444 09CC                     l1470 0A72  
                   l1446 09D4                     l1458 0A36                     l1492 0C50  
                   l1476 0AC4                     l1478 0AD0                     l1498 0C6E  
                   STR_1 0834                     STR_2 0832                     STR_3 0829  
                   STR_4 0825                     STR_5 082D                     STR_6 0836  
                   STR_7 0836                     STR_8 081A                     STR_9 0830  
                   i1l53 10B6                     i1l69 099E                     _baud 0034  
                   _main 1022                     fsr0h 000FEA                     fsr1h 000FE2  
                   fsr0l 000FE9                     fsr2h 000FDA                     fsr1l 000FE1  
                   indf2 000FDF                     fsr2l 000FD9                     btemp 0036  
                   pclat 000FFA                     prodh 000FF4                     prodl 000FF3  
                   start 00B4            __CFG_IESO$OFF 000000          __end_ofi1_putch 10D4  
          __CFG_MCLRE$ON 000000             ___param_bank 000010           _startCharacter 0030  
          __CFG_PLLDIV$5 000000          __end_of___aldiv 0D46                    ?_main 0001  
                  STR_10 0820                    STR_11 0809          __end_of___lwdiv 0F7A  
                  i1l114 006C                    i1l166 0BA6                    i1l575 1018  
                  _RCREG 000FAE     __size_of_acknowledge 0060                    _SPBRG 000FAF  
                  _PORTA 000F80                    _PORTB 000F81                    _PORTC 000F82  
          __CFG_USBDIV$1 000000                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TXREG 000FAD            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000                    _putch 10C0          i1writeByte@data 0001  
                  tablat 000FF5             ?_D_UART_Init 006E                    status 000FD8  
           ?_D_PORT_Init 0001       __size_ofi1___lwdiv 0052            _stopCharacter 0032  
       __end_ofi1_printf 0C2C               i1printf@ap 0011          __initialization 0F7A  
       _D_UART_Init$1270 0073             __end_of_main 106A                   ??_main 002E  
            i1_writeByte 10B4            __activetblptr 000002          __CFG_CCP2MX$OFF 000000  
                 _ADCON1 000FC1                   ?_putch 0001                   i1l1200 0BF6  
                 i1l1122 0FE6                   i1l1202 0BFE                   i1l1124 0FEE  
                 i1l1134 100E                   i1l1126 0FF2                   i1l1310 087A  
                 i1l1302 0866                   i1l1170 0B22                   i1l1330 08DA  
                 i1l1322 08B0                   i1l1306 086E                   i1l1164 0B0C  
                 i1l1182 0B7A                   i1l1174 0B2A                   i1l1342 0910  
                 i1l1334 08E6                   i1l1318 08A4                   i1l1168 0B1C  
                 i1l1194 0BAC                   i1l1362 095E                   i1l1354 0946  
                 i1l1346 091C                   i1l1364 0968                   i1l1368 0974  
                 i1l1298 083E                ??i1_putch 0002                   _LowISR 0018  
         __CFG_XINST$OFF 000000                ??___aldiv 002A                ??___lwdiv 002E  
       __end_of_readByte 10DC                   clear_0 0F80                   _printf 09AA  
      __end_ofi1___lwdiv 1022             __pdataCOMRAM 002E    D_UART_Init@interrupts 0072  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8            ?_D_UART_Write 0071          D_UART_Init@baud 0070  
        D_UART_Init@name 006E               __accesstop 0060  __end_of__initialization 0FC2  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001              i1printf@idx 0013  
            i1printf@val 0014           __pcstackCOMRAM 0001             __pidataBANK0 10E2  
            i1putch@data 0002            __end_of_putch 10CA         _messageCharacter 007A  
 __size_of_D_UART_Enable 0020           ??_D_UART_Write 0075                ?i1_printf 0008  
                ??_putch 002B               __pbssBANK1 0100     __size_of_D_UART_Init 00A4  
                ?_LowISR 0001     __size_of_D_PORT_Init 001E               _deviceName 0077  
                ?_printf 0063               ??i1_printf 000D  __size_of_fillDataBuffer 0170  
                i1u78_25 09A6                  i1u78_26 09A8      D_UART_Enable@enable 002A  
        __CFG_VREGEN$OFF 000000                  i1_putch 10CA                ?_readByte 0001  
     __size_of_writeByte 000C            _D_UART_Enable 106A                  __Hparam 0000  
                __Lparam 0000          __size_of_LowISR 009C               _readBuffer 0100  
                ___aldiv 0C2C                  ___lwdiv 0F1C             __psmallconst 0800  
        __CFG_STVREN$OFF 000000            ??_acknowledge 0018                  __pcinit 0F7A  
                __ramtop 0800                  __ptext0 1022                  __ptext1 0D46  
                __ptext2 09AA                  __ptext3 10C0                  __ptext4 10A8  
                __ptext5 0F1C                  __ptext6 0E18                  __ptext7 0C2C  
                __ptext8 106A                  __ptext9 108A          __size_of_printf 0158  
           ?i1_writeByte 0001        __end_of_hexpowers 0809        i1___lwdiv@divisor 0003  
      i1___lwdiv@counter 0007         ___aldiv@dividend 0060     end_of_initialization 0FC2  
             ??_readByte 0001            __Lmediumconst 0000           ?_D_UART_Enable 0001  
   __end_of_D_UART_Write 0E18                _RCSTAbits 000FAB                  printf@c 0070  
                printf@f 0063         ___aldiv@quotient 006A                  postdec1 000FE5  
                postdec2 000FDD                  postinc0 000FEE                  postinc2 000FDE  
              _PORTAbits 000F80        __end_of_writeByte 10B4                _TRISCbits 000F94  
    __end_of_acknowledge 0F1C                i1___lwdiv 0FD0                _TXSTAbits 000FAC  
           i1printf@flag 0010             i1printf@prec 0016           __end_of_LowISR 00B4  
            _BAUDCONbits 000FB8            __pidataCOMRAM 10DC           __end_of_printf 0B02  
    start_initialization 0F7A           _fillDataBuffer 083A                i1printf@c 0017  
              i1printf@f 0008               ?i1___lwdiv 0001        __size_ofi1_printf 012A  
        ??_D_UART_Enable 002A                 ??_LowISR 0019              __pdataBANK0 007A  
       __CFG_LPT1OSC$OFF 000000              _acknowledge 0EBC         D_UART_Write@data 0073  
               ??_printf 0066   __end_of_fillDataBuffer 09AA              __pbssCOMRAM 0034  
   __size_ofi1_writeByte 000C            __pcstackBANK0 0060            ??_D_UART_Init 002B  
               ?i1_putch 0001    __size_of_D_UART_Write 00D2            ??_D_PORT_Init 002A  
              __pnvBANK0 0077        __size_of_readByte 0008         ___lwdiv@dividend 002A  
               ?___aldiv 0060                 ?___lwdiv 002A              __pintcodelo 0018  
     fillDataBuffer@data 0018          ?_fillDataBuffer 0001              __smallconst 0800  
           _D_UART_Write 0D46                _hexpowers 0801                _readReady 0035  
       ___lwdiv@quotient 0061              ??i1___lwdiv 0005           __size_of_putch 000A  
        ___aldiv@divisor 0064          ___aldiv@counter 0068                 _IPR1bits 000F9F  
               _PIE1bits 000F9D      __end_of_D_UART_Init 0EBC                 _PIR1bits 000F9E  
               _RCONbits 000FD0         __CFG_WDTPS$32768 000000      __end_of_D_PORT_Init 10A8  
             printf@flag 0069               printf@prec 006F                 i1_printf 0B02  
              _writeByte 10A8                copy_data0 0FB6         __size_ofi1_putch 000A  
               __Hrparam 0000                 __Lrparam 0000         __size_of___aldiv 011A  
       __size_of___lwdiv 005E          ___lwdiv@divisor 002C          ___lwdiv@counter 0060  
               __ptext11 10D4                 __ptext12 083A                 __ptext13 0EBC  
               __ptext14 0B02                 __ptext15 10CA                 __ptext16 10B4  
               __ptext17 0FD0               ?_writeByte 0001       i1___lwdiv@dividend 0001  
            _D_UART_Init 0E18                 _readByte 10D4            __size_of_main 0048  
            _D_PORT_Init 108A                 int$flags 0036                printf@idx 006A  
              printf@val 006D             ?_acknowledge 0001    __CFG_CPUDIV$OSC1_PLL2 000000  
     i1___lwdiv@quotient 0005                putch@data 002B               _INTCONbits 000FF2  
               intlevel1 0000    __end_of_D_UART_Enable 108A                 printf@ap 006B  
       ??_fillDataBuffer 0018      D_UART_Write@command 0071            ??i1_writeByte 0001  
          writeByte@data 002A             ___aldiv@sign 0069              ??_writeByte 002A  
